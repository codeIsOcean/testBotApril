import logging
import os
import aiohttp
import asyncio

BOT_TOKEN = os.getenv("BOT_TOKEN")
LOG_CHANNEL_ID = os.getenv("LOG_CHANNEL_ID")


class TelegramLogHandler(logging.Handler):
    def __init__(self, level=logging.INFO):
        super().__init__(level)

    async def send_log(self, message: str):
        if not BOT_TOKEN or not LOG_CHANNEL_ID:
            print("‚ùó BOT_TOKEN –∏–ª–∏ LOG_CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return

        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": LOG_CHANNEL_ID,
            "text": message,
            "parse_mode": "HTML",
            "disable_web_page_preview": True
        }

        async with aiohttp.ClientSession() as session:
            try:
                resp = await session.post(url, data=payload)
                if resp.status != 200:
                    text = await resp.text()
                    print(f"‚ùå Telegram API Error: {resp.status} ‚Äî {text}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ –≤ Telegram: {e}")

    def emit(self, record):
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ formatter)
            if self.formatter:
                timestamp = self.formatter.formatTime(record, "%Y-%m-%d %H:%M:%S")
            else:
                # –ï—Å–ª–∏ formatter –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                timestamp = logging.Formatter().formatTime(record, "%Y-%m-%d %H:%M:%S")

            level = record.levelname
            emojis = {
                "DEBUG": "üîç",
                "INFO": "üì¢",
                "WARNING": "‚ö†Ô∏è",
                "ERROR": "‚ùó",
                "CRITICAL": "üî•"
            }
            icon = emojis.get(level, "üìù")

            # üí¨ –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            message = (
                f"{icon} {level} | {timestamp}\n"
                f"{record.getMessage()}"
            )

            # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ Telegram —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–∞–ø—á–µ
            if (
                    "—É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É" not in record.getMessage() and
                    "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞–ø—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é" not in record.getMessage() and
                    "–Ω–µ —Ä–µ—à–∏–ª –∫–∞–ø—á—É –≤–æ–≤—Ä–µ–º—è" not in record.getMessage()
            ):
                asyncio.create_task(self.send_log(message))

        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–≥–µ—Ä–∞:", e)


# ==== –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ù–´–ï –õ–û–ì–ò –î–õ–Ø TELEGRAM ====

async def send_formatted_log(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤ –≤ Telegram"""
    if not BOT_TOKEN or not LOG_CHANNEL_ID:
        print("‚ùó BOT_TOKEN –∏–ª–∏ LOG_CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return

    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": LOG_CHANNEL_ID,
        "text": message,
        "parse_mode": "HTML",
        "disable_web_page_preview": True
    }

    async with aiohttp.ClientSession() as session:
        try:
            resp = await session.post(url, data=payload)
            if resp.status != 200:
                text = await resp.text()
                print(f"‚ùå Telegram API Error: {resp.status} ‚Äî {text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ –≤ Telegram: {e}")


def log_new_user(username, user_id, chat_name, chat_id, message_id=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ username —Å—Ç—Ä–æ–∫–æ–π (–∑–∞—â–∏—Ç–∞ –æ—Ç None)
    user_display = f"<a href='tg://user?id={user_id}'>{username if username else f'id{user_id}'}</a>"

    msg = (
        f"‚ûï #–ù–û–í–´–ô_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ üü¢\n"
        f"‚Ä¢ –ö—Ç–æ: {user_display} [{user_id}]\n"
        f"‚Ä¢ –ì—Ä—É–ø–ø–∞: <a href='https://t.me/c/{str(chat_id).replace('-100', '')}/{str(chat_id).replace('-100', '')}'>{chat_name}</a> [{chat_id}]\n"
    )

    if message_id:
        msg += f"‚Ä¢ üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è (http://t.me/c/{str(chat_id).replace('-100', '')}/{message_id})\n"

    msg += f"#id{user_id}"

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print(f"üì± –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username} –≤ –≥—Ä—É–ø–ø–µ {chat_name}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    asyncio.create_task(send_formatted_log(msg))


def log_captcha_solved(username, user_id, chat_name, chat_id, method="–ö–Ω–æ–ø–∫–∞"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏ –∫–∞–ø—á–∏"""
    msg = (
        f"‚úÖ #–ö–ê–ü–ß–ê_–†–ï–®–ï–ù–ê üü¢\n"
        f"‚Ä¢ –ö—Ç–æ: <a href='tg://user?id={user_id}'>{username if username else f'id{user_id}'}</a> [{user_id}]\n"
        f"‚Ä¢ –ì—Ä—É–ø–ø–∞: <a href='https://t.me/c/{str(chat_id).replace('-100', '')}/{str(chat_id).replace('-100', '')}'>{chat_name}</a> [{chat_id}]\n"
        f"‚Ä¢ –ú–µ—Ç–æ–¥: {method}\n"
        f"#id{user_id}"
    )

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print(f"üì± –ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {username} –≤ –≥—Ä—É–ø–ø–µ {chat_name}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    asyncio.create_task(send_formatted_log(msg))


def log_user_banned(username, user_id, chat_name, chat_id, reason="–°–ø–∞–º"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –æ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    msg = (
        f"üö´ #–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨_–ó–ê–ë–ê–ù–ï–ù üî¥\n"
        f"‚Ä¢ –ö—Ç–æ: <a href='tg://user?id={user_id}'>{username if username else f'id{user_id}'}</a> [{user_id}]\n"
        f"‚Ä¢ –ì—Ä—É–ø–ø–∞: <a href='https://t.me/c/{str(chat_id).replace('-100', '')}/{str(chat_id).replace('-100', '')}'>{chat_name}</a> [{chat_id}]\n"
        f"‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        f"#id{user_id}"
    )

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print(f"üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞–±–∞–Ω–µ–Ω –≤ –≥—Ä—É–ø–ø–µ {chat_name}: {reason}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    asyncio.create_task(send_formatted_log(msg))


def log_join_request(username, user_id, chat_name, chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É"""
    msg = (
        f"üì¨ #–ó–ê–ü–†–û–°_–ù–ê_–í–°–¢–£–ü–õ–ï–ù–ò–ï üîµ\n"
        f"‚Ä¢ –ö—Ç–æ: <a href='tg://user?id={user_id}'>{username if username else f'id{user_id}'}</a> [{user_id}]\n"
        f"‚Ä¢ –ì—Ä—É–ø–ø–∞: <a href='https://t.me/c/{str(chat_id).replace('-100', '')}/{str(chat_id).replace('-100', '')}'>{chat_name}</a> [{chat_id}]\n"
        f"#id{user_id}"
    )

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print(f"üì± –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç {username} –≤ –≥—Ä—É–ø–ø—É {chat_name}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    asyncio.create_task(send_formatted_log(msg))


def log_captcha_failed(username, user_id, chat_name, chat_id, method="–ö–Ω–æ–ø–∫–∞"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏"""
    msg = (
        f"üì¨ #–ó–ê–ü–†–û–°_–ù–ê_–í–°–¢–£–ü–õ–ï–ù–ò–ï üî¥ #–∫–∞–ø—á–∞–Ω–µ—Ä–µ—à–µ–Ω–∞\n"
        f"‚Ä¢ –ö—Ç–æ: <a href='tg://user?id={user_id}'>{username if username else f'id{user_id}'}</a> [{user_id}]\n"
        f"‚Ä¢ –ì—Ä—É–ø–ø–∞: <a href='https://t.me/c/{str(chat_id).replace('-100', '')}/{str(chat_id).replace('-100', '')}'>{chat_name}</a> [{chat_id}]\n"
        f"#id{user_id} #–ö–ê–ü–ß–ê_–ù–ï_–£–î–ê–õ–ê–°–¨ #{method}"
    )

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print(f"üì± –ö–∞–ø—á–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {username} –≤ –≥—Ä—É–ø–ø–µ {chat_name}, –º–µ—Ç–æ–¥: {method}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    asyncio.create_task(send_formatted_log(msg))

def log_captcha_sent(username, user_id, chat_name, chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–ø—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    msg = (
        f"üì¢ #–ö–ê–ü–ß–ê_–û–¢–ü–†–ê–í–õ–ï–ù–ê üü°\n"
        f"‚Ä¢ –ö–æ–º—É: <a href='tg://user?id={user_id}'>{username if username else f'id{user_id}'}</a> [{user_id}]\n"
        f"‚Ä¢ –ì—Ä—É–ø–ø–∞: <a href='https://t.me/c/{str(chat_id).replace('-100', '')}/{str(chat_id).replace('-100', '')}'>{chat_name}</a> [{chat_id}]\n"
        f"#id{user_id}"
    )

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print(f"üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞–ø—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {username} –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É {chat_id}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    asyncio.create_task(send_formatted_log(msg))


def log_telegram_error(error_message, module_name="–ù–µ —É–∫–∞–∑–∞–Ω"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –æ–± –æ—à–∏–±–∫–µ Telegram API"""
    msg = (
        f"‚ùå #–û–®–ò–ë–ö–ê_TELEGRAM üî¥\n"
        f"‚Ä¢ –ú–æ–¥—É–ª—å: {module_name}\n"
        f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {error_message}\n"
        f"#error #telegram_api"
    )

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print(f"üì± –û—à–∏–±–∫–∞ Telegram API: {error_message}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    asyncio.create_task(send_formatted_log(msg))
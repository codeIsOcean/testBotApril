# services/start_logic.py
import logging
from typing import Dict, Tuple, Optional, Any, Union

from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from bot.services.redis_conn import redis
from bot.database.models import User
from bot.keyboards.main_menu_keyboard import get_main_menu_buttons
from bot.config import ADMIN_IDS as ALLOWED_USERS
from bot.texts.messages import SUPPORT_TEXT, INFORMATION_TEXT


async def check_and_create_user(user_id: int, username: str, full_name: str, session: AsyncSession) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏ —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    stmt = select(User).where(User.user_id == user_id)
    result = await session.execute(stmt)
    existing_user = result.scalar_one_or_none()

    if not existing_user:
        user = User(
            user_id=user_id,
            username=username,
            full_name=full_name
        )
        session.add(user)
        await session.commit()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    return user_id in ALLOWED_USERS


async def process_setup_deeplink(bot: Bot, user_id: int, group_id: str) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç deep link –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    result = {"success": False, "message": "", "title": "", "group_id": group_id}

    try:
        member = await bot.get_chat_member(int(group_id), user_id)
        if member.status not in ("administrator", "creator"):
            result["message"] = "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –±–æ—Ç–∞."
            return result
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω—Å—Ç–≤–∞: {e}")
        result["message"] = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞ –≤ –≥—Ä—É–ø–ø–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–µ—ë."
        return result

    await redis.hset(f"user:{user_id}", "group_id", group_id)

    # –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        chat = await bot.get_chat(int(group_id))
        if chat.username:
            link = f"https://t.me/{chat.username}"
            title = f"[{chat.title}]({link})"
        else:
            title = f"{chat.title} (ID: `{group_id}`)"
        result["title"] = title
    except Exception:
        result["title"] = f"ID: `{group_id}`"

    result["success"] = True
    result[
        "message"] = (f"üîß –í—ã –Ω–∞—á–∞–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≥—Ä—É–ø–ø—ã: {result['title']}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ /cancel "
                      f"–¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    return result


async def get_settings_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data="show_settings")]
    ])


async def process_captcha_deeplink(bot: Bot, user_id: int, deep_link_args: str) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç deep link –¥–ª—è –∫–∞–ø—á–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    result = {"success": False, "message": "", "captcha_data": None}

    try:
        parts = deep_link_args.split("_")
        if len(parts) != 3:
            result["message"] = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞–ø—á–∏."
            return result

        _, user_id_str, chat_id_str = parts
        target_user_id = int(user_id_str)
        chat_id = int(chat_id_str)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏—à–µ–ª –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id != target_user_id:
            result["message"] = "‚ö†Ô∏è –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –≤–∞—Å."
            return result

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞–ø—á–∏ –≤ Redis
        captcha_exists = await redis.get(f"captcha:{user_id}:{chat_id}")
        if not captcha_exists:
            result["message"] = "‚è±Ô∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞–ø—á–∏ –∏—Å—Ç–µ–∫ –∏–ª–∏ –æ–Ω–∞ —É–∂–µ —Ä–µ—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø—É."
            return result

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        from bot.services.captcha import generate_pm_captcha
        captcha_data = await generate_pm_captcha(bot, user_id, chat_id)
        if not captcha_data:
            result["message"] = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–ø—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø—É —Å–Ω–æ–≤–∞."
            return result

        result["success"] = True
        result["captcha_data"] = captcha_data
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞–ø—á–∞ —á–µ—Ä–µ–∑ deep link –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –≥—Ä—É–ø–ø–∞ {chat_id}")
        return result
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ deep link –∫–∞–ø—á–∏: {str(e)}")
        result["message"] = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        return result


async def process_bot_added_to_group(bot: Bot, user_id: int, chat_id: int, chat_title: str) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
    """
    logging.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {chat_title} (ID: {chat_id}) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (User ID: {user_id})")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–±–∞–≤–∏–≤—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞
    if user_id not in ALLOWED_USERS:
        try:
            await bot.send_message(
                chat_id,
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å @texas_dev"
            )
            # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã—Ö–æ–¥ –∏–∑ –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è:
            # await bot.leave_chat(chat_id)
            return False
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {chat_id}: {e}")
            return False
    return True


async def get_support_text() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    return SUPPORT_TEXT


async def get_information_text() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
    return INFORMATION_TEXT


async def get_available_groups(user_id: int) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º—É–ª—è—Ü–∏—é
    """
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø –∏–∑ –ë–î
    return "üîó –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –≥–¥–µ –≤—ã –∞–¥–º–∏–Ω –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ (—ç–º—É–ª—è—Ü–∏—è)."

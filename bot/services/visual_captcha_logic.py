# services/visual_captcha_logic.py
import asyncio
import random
import logging
from io import BytesIO
from typing import Dict, Optional, Any, Union, Tuple

from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram.utils.deep_linking import create_start_link
from PIL import Image, ImageDraw, ImageFont

from bot.services.redis_conn import redis

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)


async def generate_visual_captcha() -> tuple[str, BufferedInputFile]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –∫–∞–ø—á—É —Å –∏—Å–∫–∞–∂—ë–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ø—á–∏)
    """
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    width, height = 300, 120
    img = Image.new('RGB', (width, height), color=(255, 255, 255))
    d = ImageDraw.Draw(img)

    # –í—ã–±–∏—Ä–∞–µ–º —à—Ä–∏—Ñ—Ç
    try:
        fonts = [
            ImageFont.truetype("arial.ttf", size)
            for size in [36, 40, 42, 38]
        ]
    except IOError:
        fonts = [ImageFont.load_default()]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞–ø—á–∏ (—á–∏—Å–ª–æ, —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–∞—Ç. –≤—ã—Ä–∞–∂–µ–Ω–∏–µ)
    captcha_type = random.choice(['number', 'text', 'math'])

    if captcha_type == 'number':
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50
        answer = str(random.randint(1, 50))
        text_to_draw = answer
    elif captcha_type == 'text':
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä
        chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789'
        answer = ''.join(random.choice(chars) for _ in range(4))
        text_to_draw = answer
    else:  # math
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        a = random.randint(1, 20)
        b = random.randint(1, 10)
        operation = random.choice(['+', '-', '*'])
        if operation == '+':
            answer = str(a + b)
            text_to_draw = f"{a}+{b}"
        elif operation == '-':
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if a < b:
                a, b = b, a
            answer = str(a - b)
            text_to_draw = f"{a}-{b}"
        else:  # *
            a = random.randint(1, 10)
            b = random.randint(1, 9)
            answer = str(a * b)
            text_to_draw = f"{a}√ó{b}"

    # –†–∏—Å—É–µ–º —Ñ–æ–Ω–æ–≤—ã–π —à—É–º (–ª–∏–Ω–∏–∏)
    for _ in range(8):
        x1, y1 = random.randint(0, width), random.randint(0, height)
        x2, y2 = random.randint(0, width), random.randint(0, height)
        d.line([(x1, y1), (x2, y2)], fill=(
            random.randint(160, 200),
            random.randint(160, 200),
            random.randint(160, 200)
        ), width=1)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–µ—á–Ω—ã–π —à—É–º
    for _ in range(500):
        d.point(
            (random.randint(0, width), random.randint(0, height)),
            fill=(random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
        )

    # –†–∏—Å—É–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –æ—Ç–¥–µ–ª—å–Ω–æ, —Å —Ä–∞–∑–Ω—ã–º –ø–æ–≤–æ—Ä–æ—Ç–æ–º –∏ —Ü–≤–µ—Ç–æ–º
    spacing = width // (len(text_to_draw) + 2)  # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –ø–æ —à–∏—Ä–∏–Ω–µ
    x_offset = spacing

    for char in text_to_draw:
        # –°–ª—É—á–∞–π–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        angle = random.randint(-15, 15)
        font = random.choice(fonts)

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        char_img = Image.new('RGBA', (40, 50), (255, 255, 255, 0))
        char_draw = ImageDraw.Draw(char_img)

        # –°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —Å–∏–º–≤–æ–ª–∞ (–Ω–µ —Å–ª–∏—à–∫–æ–º —Å–≤–µ—Ç–ª—ã–π)
        color = (
            random.randint(0, 100),
            random.randint(0, 100),
            random.randint(0, 100)
        )

        # –†–∏—Å—É–µ–º —Å–∏–º–≤–æ–ª
        char_draw.text((5, 5), char, font=font, fill=color)

        # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        rotated = char_img.rotate(angle, expand=1, fillcolor=(255, 255, 255, 0))
        y_pos = random.randint(height // 4, height // 2)
        img.paste(rotated, (x_offset, y_pos), rotated)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞
        x_offset += spacing + random.randint(-10, 10)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫–∞–∂–∞—é—â–∏–µ –ª–∏–Ω–∏–∏ –ø–æ–≤–µ—Ä—Ö —Ç–µ–∫—Å—Ç–∞
    for _ in range(4):
        start_y = random.randint(height // 3, 2 * height // 3)
        end_y = random.randint(height // 3, 2 * height // 3)
        d.line([(0, start_y), (width, end_y)], fill=(
            random.randint(0, 150),
            random.randint(0, 150),
            random.randint(0, 150)
        ), width=2)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç—ã
    img_byte_arr = BytesIO()
    img.save(img_byte_arr, format='PNG')
    img_byte_arr.seek(0)

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    file = BufferedInputFile(img_byte_arr.getvalue(), filename="captcha.png")

    return answer, file


async def create_group_invite_link(bot: Bot, group_name: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É —Å deep link –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
    """
    deep_link = await create_start_link(bot, f"deep_link_{group_name}")
    return deep_link


async def delete_message_after_delay(bot: Bot, chat_id: int, message_id: int, delay: float):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    """
    await asyncio.sleep(delay)
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        if "message to delete not found" in str(e).lower():
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É –ø–æ–ª–Ω–æ—Å—Ç—å—é
            pass
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—ã—á–Ω—ã–µ –æ—à–∏–±–∫–∏
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {str(e)}")


async def save_join_request(user_id: int, chat_id: int, group_id: str) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ Redis
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Redis —Å TTL (–∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 1 —á–∞—Å)
    await redis.setex(
        f"join_request:{user_id}:{group_id}",
        3600,  # 1 —á–∞—Å
        str(chat_id)
    )


async def create_deeplink_for_captcha(bot: Bot, group_id: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç deep link –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏
    """
    deep_link = await create_start_link(bot, f"deep_link_{group_id}")
    logger.info(f"–°–æ–∑–¥–∞–Ω deep link: {deep_link} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")
    return deep_link


async def get_captcha_keyboard(deep_link: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üß© –ü—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É", url=deep_link)]
        ]
    )


async def get_group_settings_keyboard(group_id: str, captcha_enabled: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–ø—á–∏ –≤ –≥—Ä—É–ø–ø–µ
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if captcha_enabled == "1" else "–í–∫–ª—é—á–∏—Ç—å",
                    callback_data=f"set_visual_captcha:{group_id}:1"
                ),
                InlineKeyboardButton(
                    text="‚úÖ –í—ã–∫–ª—é—á–µ–Ω–æ" if captcha_enabled == "0" else "–í—ã–∫–ª—é—á–∏—Ç—å",
                    callback_data=f"set_visual_captcha:{group_id}:0"
                )
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="redirect:captcha_settings")]
        ]
    )


async def get_group_join_keyboard(group_link: str, group_display_name: str = None) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ
    """
    button_text = f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ {group_display_name}" if group_display_name else "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ"
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=button_text, url=group_link)]
        ]
    )


async def save_captcha_data(user_id: int, captcha_answer: str, group_name: str, attempts: int = 0) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–ø—á–∏ –≤ Redis
    """
    await redis.setex(
        f"captcha:{user_id}",
        300,  # 5 –º–∏–Ω—É—Ç
        f"{captcha_answer}:{group_name}:{attempts}"
    )


async def get_captcha_data(user_id: int) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–ø—á–∏ –∏–∑ Redis
    """
    redis_data = await redis.get(f"captcha:{user_id}")
    if not redis_data:
        return None

    parts = redis_data.split(":")
    if len(parts) < 3:
        return None

    return {
        "captcha_answer": parts[0],
        "group_name": parts[1],
        "attempts": int(parts[2]) if len(parts) > 2 else 0
    }


async def set_rate_limit(user_id: int, seconds: int = 180) -> None:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await redis.setex(f"rate_limit:{user_id}", seconds, str(seconds))


async def check_rate_limit(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç False, –µ—Å–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–µ—Ç
    """
    rate_limited = await redis.exists(f"rate_limit:{user_id}")
    return bool(rate_limited)


async def get_rate_limit_time_left(user_id: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    –ï—Å–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0
    """
    ttl = await redis.ttl(f"rate_limit:{user_id}")
    return max(0, ttl)


async def check_admin_rights(bot: Bot, chat_id: int, user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ
    """
    try:
        chat_member = await bot.get_chat_member(chat_id, user_id)
        return chat_member.status in ["administrator", "creator"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False


async def set_visual_captcha_status(chat_id: int, enabled: bool) -> None:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã
    """
    value = "1" if enabled else "0"
    await redis.set(f"visual_captcha_enabled:{chat_id}", value)


async def get_visual_captcha_status(chat_id: int) -> bool:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã
    """
    value = await redis.get(f"visual_captcha_enabled:{chat_id}")
    return value == "1"


async def approve_chat_join_request(bot: Bot, chat_id: int, user_id: int) -> Dict[str, Any]:
    """
    –û–¥–æ–±—Ä—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
    """
    result = {"success": False, "message": "", "group_link": None}

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
        await bot.approve_chat_join_request(
            chat_id=chat_id,
            user_id=user_id
        )
        result["success"] = True
        result["message"] = "–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ–¥–æ–±—Ä–µ–Ω."

        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
        try:
            chat = await bot.get_chat(chat_id)
            if chat.username:
                result["group_link"] = f"https://t.me/{chat.username}"
            else:
                # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                invite_link = await bot.create_chat_invite_link(chat_id=chat_id)
                result["group_link"] = invite_link.invite_link
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É: {e}")
            result["message"] += "\n–ù–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≥—Ä—É–ø–ø—ã."

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {e}")
        result["message"] = f"–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –≥—Ä—É–ø–ø—É: {str(e)}"

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            chat = await bot.get_chat(chat_id)
            if chat.username:
                result["group_link"] = f"https://t.me/{chat.username}"
            else:
                invite_link = await bot.create_chat_invite_link(chat_id=chat_id)
                result["group_link"] = invite_link.invite_link
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è: {e}")

    return result


async def get_group_display_name(group_name: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –≥—Ä—É–ø–ø—ã –∏–∑ Redis –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–∑ group_name
    """
    group_display_name = await redis.get(f"group_display_name:{group_name}")

    if not group_display_name:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º group_name, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
        group_display_name = group_name.replace('_', ' ').title()
    else:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è - —Å—Ç—Ä–æ–∫–∞
        group_display_name = str(group_display_name)

    return group_display_name
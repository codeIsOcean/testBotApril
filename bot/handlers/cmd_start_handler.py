from aiogram import Router, types, F, Bot
from aiogram.types import Message, CallbackQuery, ChatMemberUpdated
import logging
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select # –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ–ø—è—Ç –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–µ—Ö –∂–µ —é–∑–µ—Ä–æ–≤ –≤ –±–¥

from bot.config import ADMIN_IDS
from bot.models import User
from keyboards.main_menu_keyboard import get_main_menu_buttons
from texts import messages
from keyboards import main_menu_keyboard
from texts.messages import SUPPORT_TEXT, INFORMATION_TEXT

cmd_start_router = Router()
ALLOWED_USERS = ADMIN_IDS


@cmd_start_router.message(Command("start"))
async def cmd_start(message: types.Message, session: AsyncSession):
    logging.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} (ID: {message.from_user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /start.")
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    stmt = select(User).where(User.user_id == message.from_user.id)
    result = await session.execute(stmt)
    existing_user = result.scalar_one_or_none()
    # –µ—Å–ª–∏ –Ω–µ—Ç –≤ –±–¥ - –¥–æ–±–∞–≤–∏—Ç—å
    if not existing_user:
        user = User(
            user_id=message.from_user.id,
            username=message.from_user.username,
            full_name=message.from_user.full_name
        )
        session.add(user)
        await session.commit()

    # –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –±–æ—Ç –æ—Ç–≤–µ—á–∞–ª
    await message.answer(
        text=f"*{message.from_user.full_name}* üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è "
             f"—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_main_menu_buttons()
    )


# —Ö—ç–Ω–¥–ª–µ—Ä—ã –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

# —Ö—ç–Ω–¥–ª–µ—Ä –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
@cmd_start_router.callback_query(F.data == "add_group")
async def add_bot_group_callback(call: CallbackQuery):
    text = "\ud83d\udd17 –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –≥–¥–µ –≤—ã –∞–¥–º–∏–Ω –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ (—ç–º—É–ª—è—Ü–∏—è)."


# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏—à–∏ support –≤ main menu
@cmd_start_router.callback_query(F.data == "support")
async def support_callback(call: CallbackQuery):
    await call.message.edit_text(SUPPORT_TEXT)


# —Ö—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏—à–∏ information
@cmd_start_router.callback_query(F.data == "information")
async def information_callback(call: CallbackQuery):
    await call.message.edit_text(INFORMATION_TEXT)


# —Ö—ç–Ω–¥–ª–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É, —á—Ç–æ –±–æ—Ç —Å—Ç–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@cmd_start_router.my_chat_member()
async def check_bot_added_to_group(event: ChatMemberUpdated):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–æ—Ç —Å—Ç–∞–ª –∞–¥–º–∏–Ω–æ–º
    if event.new_chat_member.status in ("administrator", "member"):
        user = event.from_user
        chat = event.chat
        logging.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {chat.title} (ID: {chat.id} –æ—Ç {user.full_name} (User ID: {user.id})")

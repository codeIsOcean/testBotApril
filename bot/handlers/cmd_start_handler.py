# ‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω: 02.05.25
from aiogram import Router, types, F
from aiogram.types import CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
# –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
from aiogram.types import ChatMemberUpdated
from aiogram.filters.chat_member_updated import ChatMemberUpdatedFilter
from aiogram.enums.chat_member_status import ChatMemberStatus
import logging
from aiogram.filters import CommandStart
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from bot.services.redis_conn import redis

from bot.config import ADMIN_IDS as ALLOWED_USERS
from bot.database.models import User
from bot.keyboards.main_menu_keyboard import get_main_menu_buttons
from bot.texts.messages import SUPPORT_TEXT, INFORMATION_TEXT

cmd_start_router = Router()


@cmd_start_router.message(CommandStart(deep_link=True))
async def cmd_start(message: types.Message, command: CommandStart, session: AsyncSession):
    logging.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} (ID: {message.from_user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /start.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    stmt = select(User).where(User.user_id == message.from_user.id)
    result = await session.execute(stmt)
    existing_user = result.scalar_one_or_none()

    if not existing_user:
        user = User(
            user_id=message.from_user.id,
            username=message.from_user.username,
            full_name=message.from_user.full_name
        )
        session.add(user)
        await session.commit()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å "
                             "@texas_dev")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ deep link –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    if command.args:
        if command.args.startswith("setup_"):
            group_id = command.args.replace("setup_", "")

            try:
                member = await message.bot.get_chat_member(int(group_id), message.from_user.id)
                if member.status not in ("administrator", "creator"):
                    await message.answer("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –±–æ—Ç–∞.")
                    return
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω—Å—Ç–≤–∞: {e}")
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞ –≤ –≥—Ä—É–ø–ø–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–µ—ë.")
                return

            await redis.hset(f"user:{message.from_user.id}", "group_id", group_id)

            # –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                chat = await message.bot.get_chat(int(group_id))
                if chat.username:
                    link = f"https://t.me/{chat.username}"
                    title = f"[{chat.title}]({link})"
                else:
                    title = f"{chat.title} (ID: `{group_id}`)"
            except Exception:
                title = f"ID: `{group_id}`"

            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
            await message.answer(
                f"üîß –í—ã –Ω–∞—á–∞–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≥—Ä—É–ø–ø—ã: {title}\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
            await message.answer(
                "üëá –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data="show_settings")]
                ])
            )

            return

    # –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    await message.answer(
        text=f"*{message.from_user.full_name}* üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è "
             f"—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_main_menu_buttons(),
        parse_mode="Markdown"
    )


@cmd_start_router.message(CommandStart())
async def start_without_args(message: types.Message, session: AsyncSession):
    logging.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} (ID: {message.from_user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–±—ã—á–Ω—ã–π /start.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    stmt = select(User).where(User.user_id == message.from_user.id)
    result = await session.execute(stmt)
    existing_user = result.scalar_one_or_none()
    if not existing_user:
        user = User(
            user_id=message.from_user.id,
            username=message.from_user.username,
            full_name=message.from_user.full_name
        )
        session.add(user)
        await session.commit()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å @texas_dev")
        return

    # –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    await message.answer(
        text=f"*{message.from_user.full_name}* üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è "
             f"—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_main_menu_buttons(),
        parse_mode="Markdown",
        disable_web_page_preview=True
    )


@cmd_start_router.callback_query(F.data == "add_group")
async def add_bot_group_callback(call: CallbackQuery):
    text = "üîó –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –≥–¥–µ –≤—ã –∞–¥–º–∏–Ω –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ (—ç–º—É–ª—è—Ü–∏—è)."
    await call.message.answer(text)


@cmd_start_router.callback_query(F.data == "support")
async def support_callback(call: CallbackQuery):
    await call.message.edit_text(SUPPORT_TEXT)


@cmd_start_router.callback_query(F.data == "information")
async def information_callback(call: CallbackQuery):
    await call.message.edit_text(INFORMATION_TEXT)


@cmd_start_router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=True))
async def bot_chat_member_update(event: ChatMemberUpdated):
    # –ë–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É
    if event.new_chat_member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR]:
        user = event.from_user
        chat = event.chat
        logging.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {chat.title} (ID: {chat.id}) –æ—Ç {user.full_name} (User ID: {user.id})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–±–∞–≤–∏–≤—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞
        if user.id not in ALLOWED_USERS:
            try:
                await event.bot.send_message(
                    chat.id,
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å @texas_dev"
                )
                # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã—Ö–æ–¥ –∏–∑ –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è:
                # await event.bot.leave_chat(chat.id)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {chat.id}: {e}")

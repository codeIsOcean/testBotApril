from aiogram import Bot, F
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, ChatMemberUpdated
from aiogram.utils.deep_linking import create_start_link
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, insert, or_
import logging

from bot.database.models import Group, ChatSettings, UserGroup, User, CaptchaSettings
from bot.handlers.group_management.settings_inprivate_handler import redis
from bot.handlers.group_management.settings_inprivate_handler import photo_filter_settings_callback
from bot.handlers.group_management.settings_inprivate_handler import captcha_settings_callback
from bot.handlers.captcha.visual_captcha_handler import visual_captcha_handler_router
from bot.handlers.captcha.visual_captcha_handler import visual_captcha_settings
from bot.handlers.moderation.new_member_requested_mute import new_member_requested_handler_settings

# —Ñ–∞–π–ª –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ /settings –∞–¥–º–∏–Ω–∞–º–∏

logger = logging.getLogger(__name__)

group_settings_handler = Router()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–∞–ø—á–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Redis –∏ –ë–î)
async def get_captcha_settings(session: AsyncSession, group_id: int) -> tuple[bool, bool]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ø—á–∏ –∏–∑ Redis –∏–ª–∏ –ë–î.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (captcha_enabled, captcha_in_pm)
    """
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Redis (–±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø)
    try:
        if redis:
            captcha_enabled = await redis.hget(f"group:{group_id}", "captcha_enabled")
            captcha_in_pm = await redis.hget(f"group:{group_id}", "captcha_in_pm")

            if captcha_enabled is not None and captcha_in_pm is not None:
                return captcha_enabled == "1", captcha_in_pm == "1"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–ø—á–∏ –∏–∑ Redis: {e}")

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Redis, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î
    try:
        result = await session.execute(
            select(CaptchaSettings).where(CaptchaSettings.group_id == group_id)
        )
        settings = result.scalar_one_or_none()

        if settings:
            # –û–±–Ω–æ–≤–ª—è–µ–º Redis –¥–ª—è –±—É–¥—É—â–∏—Ö –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            if redis:
                await redis.hset(f"group:{group_id}", "captcha_enabled", "1" if settings.is_enabled else "0")
                # –ü–æ—Å–∫–æ–ª—å–∫—É –≤ –ë–î –Ω–µ—Ç captcha_in_pm, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                default_in_pm = "0"  # –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–∞—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                await redis.hset(f"group:{group_id}", "captcha_in_pm", default_in_pm)

            return settings.is_enabled, False  # False –¥–ª—è captcha_in_pm, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –≤ –º–æ–¥–µ–ª–∏

        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç –≤ –ë–î, —Å–æ–∑–¥–∞–µ–º –∏—Ö —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        settings = CaptchaSettings(
            group_id=group_id,
            is_enabled=False
        )
        session.add(settings)
        await session.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º Redis
        if redis:
            await redis.hset(f"group:{group_id}", "captcha_enabled", "0")
            await redis.hset(f"group:{group_id}", "captcha_in_pm", "0")

        return False, False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–ø—á–∏ –∏–∑ –ë–î: {e}")
        return False, False


async def update_captcha_settings(session: AsyncSession, group_id: int,
                                  setting_key: str, new_value: str):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ø—á–∏ –≤ Redis –∏ –ë–î
    setting_key: 'captcha_enabled' –∏–ª–∏ 'captcha_in_pm'
    new_value: '0' –∏–ª–∏ '1'
    """
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º Redis –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        if redis:
            await redis.hset(f"group:{group_id}", setting_key, new_value)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        if setting_key == "captcha_enabled":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            result = await session.execute(
                select(CaptchaSettings).where(CaptchaSettings.group_id == group_id)
            )
            settings = result.scalar_one_or_none()

            is_enabled = new_value == "1"

            if settings:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                await session.execute(
                    update(CaptchaSettings)
                    .where(CaptchaSettings.group_id == group_id)
                    .values(is_enabled=is_enabled)
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                session.add(CaptchaSettings(
                    group_id=group_id,
                    is_enabled=is_enabled
                ))

            await session.commit()
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–ø—á–∏ (enabled={is_enabled}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")

        # –î–ª—è captcha_in_pm –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –≤ CaptchaSettings, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        # –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–ø—á–∏: {e}")
        await session.rollback()


async def is_user_admin(bot: Bot, chat_id: int, user_id: int) -> bool:
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ Telegram API"""
    try:
        chat_member = await bot.get_chat_member(chat_id, user_id)
        return chat_member.status in ("administrator", "creator")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ API: {e}")
        return False


async def is_user_group_admin(bot: Bot, user_id: int, chat_id: int, session: AsyncSession) -> tuple[bool, Group | None]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã"""
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –≥—Ä—É–ø–ø—ã
    creator_result = await session.execute(
        select(Group).where(Group.chat_id == chat_id, Group.creator_user_id == user_id)
    )
    group = creator_result.scalar_one_or_none()

    if group:
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –≥—Ä—É–ø–ø—ã {chat_id}")
        return True, group

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ UserGroup
    admin_result = await session.execute(
        select(UserGroup).join(Group, Group.chat_id == UserGroup.group_id)
        .where(
            UserGroup.user_id == user_id,
            Group.chat_id == chat_id
        )
    )
    user_group = admin_result.scalar_one_or_none()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ UserGroup
    if user_group:
        group_result = await session.execute(
            select(Group).where(Group.chat_id == chat_id)
        )
        group = group_result.scalar_one_or_none()
        if group:
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã {chat_id} (–∏–∑ UserGroup)")
            return True, group

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API Telegram
    try:
        chat_member = await bot.get_chat_member(chat_id, user_id)
        if chat_member.status in ('administrator', 'creator'):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            group_result = await session.execute(
                select(Group).where(Group.chat_id == chat_id)
            )
            group = group_result.scalar_one_or_none()

            if group:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ UserGroup, –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
                await session.execute(
                    insert(UserGroup)
                    .values(user_id=user_id, group_id=chat_id)
                    .on_conflict_do_nothing()
                )
                await session.commit()

                logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã {chat_id} (–∏–∑ Telegram API)")
                return True, group
    except Exception as e:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥—Ä—É–ø–ø–∞ –≤–æ–æ–±—â–µ
        try:
            await bot.get_chat(chat_id)
            # –ì—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ —á–µ—Ä–µ–∑ API: {e}")
        except Exception:
            # –ì—Ä—É–ø–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø–æ–º–µ—Ç–∏–º –µ—ë –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
            if group:
                group.is_active = False
                await session.commit()
                logger.warning(f"–ì—Ä—É–ø–ø–∞ {chat_id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã {chat_id}")
    return False, None


async def get_user_id_by_redis_key(key: str):
    if redis is None:
        logger.error("Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return None
    try:
        user_id = key.split(":")[1]
        return int(user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ user_id –∏–∑ –∫–ª—é—á–∞ Redis: {e}")
        return None


async def get_user_group_id(user_id: int):
    if redis is None:
        logger.error("Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return None
    try:
        group_id = await redis.hget(f"user:{user_id}", "group_id")
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: –≥—Ä—É–ø–ø–∞ {group_id}")
        if group_id:
            return int(group_id)
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Redis: {e}")
        return None


async def clear_user_data(user_id: int):
    if redis is None:
        logger.error("Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return False
    try:
        await redis.delete(f"user:{user_id}")
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω—ã –∏–∑ Redis")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Redis: {e}")
        return False


@group_settings_handler.callback_query(F.data == "setup_bot")
async def setup_bot_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id

    logger.info(f"–ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}")

    if not await is_user_admin(callback.bot, chat_id, user_id):
        await callback.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞", show_alert=True)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã {chat_id}")
        return

    link = await create_start_link(callback.bot, payload=f"setup_{chat_id}")
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, –≥–ª—É–±–æ–∫–∞—è —Å—Å—ã–ª–∫–∞: {link}")
    await callback.message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞", url=link)]
        ])
    )
    await callback.answer()


@group_settings_handler.message(Command(commands=["setup", "settings"]),
                                F.chat.type.in_({"ChatType.GROUP", "ChatType.SUPERGROUP"}))
async def setup_command_in_group(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ {message.text} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}")

    if await is_user_admin(message.bot, chat_id, user_id):
        link = await create_start_link(message.bot, payload=f"setup_{chat_id}")
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –≥–ª—É–±–æ–∫–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {link}")

        setup_button = InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞", url=link)
        setup_markup = InlineKeyboardMarkup(inline_keyboard=[[setup_button]])

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω—É {user_id}")
        await message.answer(
            "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –º–µ–Ω—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ.",
            reply_markup=setup_markup
        )
    else:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã {chat_id}")
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã.")


async def get_group_settings_keyboard(group_id, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≥—Ä—É–ø–ø—ã"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ Redis
    captcha_enabled, captcha_in_pm = await get_captcha_settings(session, group_id)

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"–ö–∞–ø—á–∞: {'‚úÖ' if captcha_enabled else '‚ùå'}",
                callback_data=f"toggle_captcha_{'on' if captcha_enabled else 'off'}_{group_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"–ö–∞–ø—á–∞ –≤ –õ–°: {'‚úÖ' if captcha_in_pm else '‚ùå'}",
                callback_data=f"toggle_pm_captcha_{'on' if captcha_in_pm else 'off'}_{group_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="–í–µ—Ä–Ω—É—Ç—å—Å—è",
                callback_data=f"group_settings_{group_id}"
            )
        ]
    ])


# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
@group_settings_handler.callback_query(F.data.startswith(("toggle_pm_captcha_", "toggle_captcha_")))
async def toggle_group_settings(callback: CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id
    data = callback.data
    parts = data.split("_")

    if len(parts) != 4:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    setting_type = parts[1]  # "pm_captcha" –∏–ª–∏ "captcha"
    status = parts[2]  # "on" –∏–ª–∏ "off"
    group_id = int(parts[3])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    is_admin, _ = await is_user_group_admin(callback.bot, user_id, group_id, session)
    if not is_admin:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã", show_alert=True)
        return

    new_status = "1" if status == "off" else "0"
    status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if new_status == "1" else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    setting_key = "captcha_in_pm" if setting_type == "pm_captcha" else "captcha_enabled"
    setting_name = "–ö–∞–ø—á–∞ –≤ –õ–°" if setting_type == "pm_captcha" else "–ö–∞–ø—á–∞"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ Redis –∏ –ë–î
    await update_captcha_settings(session, group_id, setting_key, new_status)
    logger.info(f"–°—Ç–∞—Ç—É—Å {setting_name.lower()} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {status_text}")

    # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    settings_keyboard = await get_group_settings_keyboard(group_id, session)

    await callback.message.edit_reply_markup(reply_markup=settings_keyboard)
    await callback.answer(f"{setting_name} {status_text} –¥–ª—è –≥—Ä—É–ø–ø—ã")


@group_settings_handler.message(Command("settings"))
@group_settings_handler.message(
    Command(commands=["start"], magic=lambda cmd: cmd.args and cmd.args.startswith("setup_")))
async def list_groups_of_admin(message: Message, session: AsyncSession, bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏–ª–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
    if message.chat.type != "private":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
        if not await is_user_admin(message.bot, message.chat.id, message.from_user.id):
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É, –Ω–µ –æ—Ç–≤–µ—á–∞—è
            return
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")
        return

    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª—É–±–æ–∫–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
    if message.text.startswith("/start setup_"):
        try:
            chat_id = int(message.text.split("_")[1])
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –≥–ª—É–±–æ–∫–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã {chat_id}")

            is_admin, group = await is_user_group_admin(bot, user_id, chat_id, session)
            if not is_admin:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")
                return

            call = CallbackQuery(
                id="direct_link",
                from_user=message.from_user,
                chat_instance="direct_link",
                message=message,
                data=f"group_settings:{chat_id}"
            )
            await show_group_settings(call, session, bot)
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–ª—É–±–æ–∫–æ–π —Å—Å—ã–ª–∫–∏: {e}")
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
            return

    try:
        user_result = await session.execute(
            select(User).where(User.user_id == user_id)
        )
        user = user_result.scalar_one_or_none()

        if not user:
            user = User(
                user_id=user_id,
                username=message.from_user.username,
                full_name=f"{message.from_user.first_name} {message.from_user.last_name or ''}".strip()
            )
            session.add(user)
            await session.commit()

        # üî• –î–û–ë–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ, –µ—Å–ª–∏ –æ–Ω –∞–¥–º–∏–Ω
        all_groups = await session.execute(select(Group))
        for group in all_groups.scalars().all():
            try:
                member = await bot.get_chat_member(group.chat_id, user_id)
                if member.status in ("administrator", "creator"):
                    exists = await session.execute(
                        select(UserGroup).where(UserGroup.user_id == user_id, UserGroup.group_id == group.chat_id)
                    )
                    if not exists.scalar_one_or_none():
                        session.add(UserGroup(user_id=user_id, group_id=group.chat_id))
                        await session.commit()
                        logger.info(f"üìå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å: user={user_id}, group={group.chat_id}")
            except Exception as e:
                logger.warning(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞ –≤ –≥—Ä—É–ø–ø–µ {group.chat_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî creator –∏–ª–∏ –≤ UserGroup
        groups_query = (
            select(Group)
            .outerjoin(UserGroup, Group.chat_id == UserGroup.group_id)
            .where(or_(
                Group.creator_user_id == user_id,
                UserGroup.user_id == user_id
            ))
        )
        result = await session.execute(groups_query)
        groups = list(result.scalars().all())

    except Exception as e:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        return

    if not groups:
        await message.answer(
            "‚ÑπÔ∏è –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã —Å —ç—Ç–∏–º –±–æ—Ç–æ–º. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –µ–≥–æ "
            "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return

    buttons = [
        [InlineKeyboardButton(text=g.title, callback_data=f"group_settings:{g.chat_id}")]
        for g in groups
    ]

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("üîß –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=kb)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª —Å–ø–∏—Å–æ–∫ –∏–∑ {len(groups)} –≥—Ä—É–ø–ø –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")


async def list_groups_of_admin_from_user_id(user_id: int, call: CallbackQuery, session: AsyncSession, bot: Bot):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        groups_query = (
            select(Group)
            .outerjoin(UserGroup, Group.chat_id == UserGroup.group_id)
            .where(or_(
                Group.creator_user_id == user_id,
                UserGroup.user_id == user_id
            ))
        )
        result = await session.execute(groups_query)
        groups = list(result.scalars().all())

        if not groups:
            await call.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", show_alert=True)
            return

        buttons = [
            [InlineKeyboardButton(text=g.title, callback_data=f"group_settings:{g.chat_id}")]
            for g in groups
        ]
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)

        try:
            await call.message.edit_text("üîß –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=kb)
        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            await call.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É—Å—Ç–∞—Ä–µ–ª–æ.", show_alert=True)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –¥–ª—è user_id={user_id}: {e}", exc_info=True)


@group_settings_handler.callback_query(lambda c: c.data.startswith("group_settings:"))
async def show_group_settings(call: CallbackQuery, session: AsyncSession, bot: Bot):
    user_id = call.from_user.id
    chat_id = int(call.data.split(":")[1])

    logger.debug(f"user_id: {user_id}, type: {type(user_id)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
    is_admin, group = await is_user_group_admin(bot, user_id, chat_id, session)

    if not is_admin or not group:
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π –≥—Ä—É–ø–ø–æ–π", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≥—Ä—É–ø–ø—ã –≤ Redis –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await redis.hset(f"user:{user_id}", "group_id", chat_id)

    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ ChatSettings
    chat_settings_result = await session.execute(
        select(ChatSettings).where(ChatSettings.chat_id == chat_id)
    )
    chat_settings = chat_settings_result.scalar_one_or_none()

    # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞–µ–º –∏—Ö —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    if not chat_settings:
        logger.info(f"–°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
        chat_settings = ChatSettings(
            chat_id=chat_id,
            enable_photo_filter=False,
            admins_bypass_photo_filter=True,
            photo_filter_mute_minutes=60
        )
        session.add(chat_settings)
        await session.commit()
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –ø–æ–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await session.commit()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏—Ö –≤ —Ç–µ–∫—É—â–µ–º —Ä–æ—É—Ç–µ—Ä–µ
    await call.message.edit_text(
        f"üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã: {group.title}\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚è± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ú—É—Ç–∞ –ù–æ–≤—ã—Ö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                                  callback_data="redirect:new_member_requested_handler_settings")],
            [InlineKeyboardButton(text="ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ö–∞–ø—á–∏", callback_data="redirect:captcha_settings")],
            [InlineKeyboardButton(text="üñº –í–∏–∑—É–∞–ª—å–Ω–∞—è –ö–∞–ø—á–∞", callback_data="redirect:visual_captcha_settings")],
            [InlineKeyboardButton(text="üñº –§–∏–ª—å—Ç—Ä –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", callback_data="redirect:photo_filter_settings")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø", callback_data="back_to_groups")]
        ]),
        parse_mode="HTML",
        disable_web_page_preview=True
    )

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã {chat_id} ({group.title})")


@group_settings_handler.callback_query(lambda c: c.data.startswith("redirect:"))
async def redirect_callback(call: CallbackQuery, session: AsyncSession, bot: Bot):
    original_callback = call.data.split(":", 1)[1]
    user_id = call.from_user.id

    logger.info(f"‚öôÔ∏è [Redirect] –ü–æ–ª—É—á–µ–Ω callback: {original_callback} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    group_id = await redis.hget(f"user:{user_id}", "group_id")
    logger.debug(f"üß© [Redirect] group_id –∏–∑ Redis: {group_id}")

    if not group_id:
        await call.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ –≥—Ä—É–ø–ø–µ", show_alert=True)
        return

    is_admin, group = await is_user_group_admin(bot, user_id, int(group_id), session)
    logger.info(f"üîë [Redirect] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞: user_id={user_id}, group_id={group_id}, is_admin={is_admin}")

    if not is_admin:
        logger.warning(f"‚ùå [Redirect] –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ: user_id={user_id}, group_id={group_id}")
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π –≥—Ä—É–ø–ø–æ–π", show_alert=True)
        return

    # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    try:
        if original_callback == "captcha_settings":
            await captcha_settings_callback(call)
        elif original_callback == "photo_filter_settings":
            await photo_filter_settings_callback(call)
        elif original_callback == "new_member_requested_handler_settings":
            await new_member_requested_handler_settings(call)
        elif original_callback == "visual_captcha_settings":
            logger.info(f"üéØ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ visual_captcha_settings –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, "
                        f"–≥—Ä—É–ø–ø–∞ {group_id}")
            # –ü–µ—Ä–µ–¥–∞–µ–º None –≤ –∫–∞—á–µ—Å—Ç–≤–µ state –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            await visual_captcha_settings(call, None)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ redirect-callback {original_callback}: {e}", exc_info=True)
        await call.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)


@group_settings_handler.callback_query(lambda c: c.data.startswith("toggle_photo_filter:"))
async def toggle_photo_filter(call: CallbackQuery, session: AsyncSession, bot: Bot):
    user_id = call.from_user.id
    chat_id = int(call.data.split(":")[1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_admin, _ = await is_user_group_admin(bot, user_id, chat_id, session)

    if not is_admin:
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π –≥—Ä—É–ø–ø–æ–π", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    result = await session.execute(
        select(ChatSettings).where(ChatSettings.chat_id == chat_id)
    )
    settings = result.scalar_one_or_none()

    # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞–µ–º –∏—Ö —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    if not settings:
        logger.info(f"–°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
        settings = ChatSettings(
            chat_id=chat_id,
            enable_photo_filter=True,  # –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ True, —Ç–∞–∫ –∫–∞–∫ –º—ã –≤–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
            admins_bypass_photo_filter=True,
            photo_filter_mute_minutes=60
        )
        session.add(settings)
        await session.commit()
        new_value = True
    else:
        # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        new_value = not settings.enable_photo_filter
        await session.execute(
            update(ChatSettings)
            .where(ChatSettings.chat_id == chat_id)
            .values(enable_photo_filter=new_value)
        )
        await session.commit()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≥—Ä—É–ø–ø—ã
    await show_group_settings(call, session, bot)
    await call.answer(f"–§–∏–ª—å—Ç—Ä —Ñ–æ—Ç–æ {'–≤–∫–ª—é—á–µ–Ω' if new_value else '–≤—ã–∫–ª—é—á–µ–Ω'}")


@group_settings_handler.callback_query(lambda c: c.data.startswith("toggle_admin_bypass:"))
async def toggle_admin_bypass(call: CallbackQuery, session: AsyncSession, bot: Bot):
    user_id = call.from_user.id
    chat_id = int(call.data.split(":")[1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_admin, _ = await is_user_group_admin(bot, user_id, chat_id, session)

    if not is_admin:
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π –≥—Ä—É–ø–ø–æ–π", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    result = await session.execute(
        select(ChatSettings).where(ChatSettings.chat_id == chat_id)
    )
    settings = result.scalar_one()

    # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    new_value = not settings.admins_bypass_photo_filter
    await session.execute(
        update(ChatSettings)
        .where(ChatSettings.chat_id == chat_id)
        .values(admins_bypass_photo_filter=new_value)
    )
    await session.commit()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≥—Ä—É–ø–ø—ã
    await show_group_settings(call, session, bot)
    await call.answer(f"–û–±—Ö–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞ –∞–¥–º–∏–Ω–∞–º–∏ {'–≤–∫–ª—é—á–µ–Ω' if new_value else '–≤—ã–∫–ª—é—á–µ–Ω'}")


@group_settings_handler.callback_query(lambda c: c.data == "back_to_groups")
async def back_to_groups_list(call: CallbackQuery, session: AsyncSession, bot: Bot):
    user_id = call.from_user.id
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≥—Ä—É–ø–ø—É –≤ Redis –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    # (–ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É)
    # await redis.hdel(f"user:{user_id}", "group_id")
    await list_groups_of_admin_from_user_id(user_id, call, session, bot)


@group_settings_handler.my_chat_member()
async def handle_bot_added(event: ChatMemberUpdated, session: AsyncSession, bot: Bot):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
    if event.new_chat_member.status not in ("member", "administrator"):
        return

    chat = event.chat
    chat_id = chat.id
    logger.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É: {chat.title} (ID: {chat_id})")

    try:
        async with session.begin():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ –≤ –ë–î
            group_result = await session.execute(
                select(Group).where(Group.chat_id == chat_id)
            )
            group = group_result.scalar_one_or_none()

            if not group:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≥—Ä—É–ø–ø—ã
                admins = await bot.get_chat_administrators(chat_id)
                creator = next((a for a in admins if a.status == "creator"), None)
                creator_id = creator.user.id if creator else None

                # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
                for admin in admins:
                    admin_id = admin.user.id
                    admin_username = admin.user.username
                    admin_full_name = f"{admin.user.first_name} {admin.user.last_name or ''}".strip()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
                    user_result = await session.execute(
                        select(User).where(User.user_id == admin_id)
                    )
                    user = user_result.scalar_one_or_none()

                    if not user:
                        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user = User(
                            user_id=admin_id,
                            username=admin_username,
                            full_name=admin_full_name
                        )
                        session.add(user)

                await session.flush()

                group = Group(
                    chat_id=chat_id,
                    title=chat.title,
                    creator_user_id=creator_id,
                    is_active=True
                )
                logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É: {chat.title} ({chat.id}), creator={creator_id}")
                session.add(group)
                await session.flush()

                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ UserGroup
                for admin in admins:
                    admin_id = admin.user.id
                    await session.execute(
                        insert(UserGroup)
                        .values(user_id=admin_id, group_id=chat_id)
                        .on_conflict_do_nothing()
                    )

                    logger.info("‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        setup_link = await create_start_link(bot, f"setup_{chat_id}", encode=True)
        await bot.send_message(
            chat_id,
            "ü§ñ –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É!\n\n"
            "‚öôÔ∏è <b>–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b> –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç:\n"
            "1. –ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –≤ –õ–° –∫–æ–º–∞–Ω–¥—É <code>/settings</code>\n"
            f"2. –ò–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {setup_link}\n\n"
            "üîê –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.",
            parse_mode="HTML"
        )
        logger.info(f"–ì—Ä—É–ø–ø–∞ {chat.title} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã {chat.title}: {str(e)}", exc_info=True)
        try:
            await session.rollback()
        except:
            pass


@group_settings_handler.message(Command("group_info"))
async def show_group_info(message: Message, session: AsyncSession, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø–µ –∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if message.chat.type not in ["group", "supergroup"]:
        await message.answer("‚ÑπÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö")
        return

    chat_id = message.chat.id
    user_id = message.from_user.id

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –≥—Ä—É–ø–ø–∞ –≤ –ë–î
        group_result = await session.execute(select(Group).where(Group.chat_id == chat_id))
        group = group_result.scalar_one_or_none()

        if not group:
            await message.answer("‚ÑπÔ∏è –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ Telegram
        admins = await bot.get_chat_administrators(chat_id)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –Ω–∞—à–µ–π –ë–î
        db_admins_result = await session.execute(
            select(UserGroup.user_id).where(UserGroup.group_id == chat_id)
        )
        db_admin_ids = [row[0] for row in db_admins_result]

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ø—á–∏
        captcha_enabled, captcha_in_pm = await get_captcha_settings(session, chat_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        text = [
            f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:</b> {message.chat.title}",
            f"üÜî ID: <code>{chat_id}</code>",
            f"üëë –°–æ–∑–¥–∞—Ç–µ–ª—å: <code>{group.creator_user_id}</code>",
            f"üîí –ö–∞–ø—á–∞: {'–í–∫–ª—é—á–µ–Ω–∞' if captcha_enabled else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}",
            f"üì± –ö–∞–ø—á–∞ –≤ –õ–°: {'–í–∫–ª—é—á–µ–Ω–∞' if captcha_in_pm else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}",
            "",
            "üë• <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤ Telegram:</b>"
        ]

        for admin in admins:
            name = admin.user.username or f"{admin.user.first_name} {admin.user.last_name or ''}".strip()
            text.append(f"- {name} (ID: <code>{admin.user.id}</code>) - {admin.status}")

        text.extend([
            "",
            f"üîë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤ –±–∞–∑–µ –±–æ—Ç–∞</b> ({len(db_admin_ids)}):"
        ])

        for admin_id in db_admin_ids:
            text.append(f"- ID: <code>{admin_id}</code>")

        await message.answer("\n".join(text), parse_mode="HTML")
        logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ {chat_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ {chat_id}: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ.")


@group_settings_handler.message(Command("force_debug"))
async def force_debug(message: Message, session: AsyncSession, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–∞—Ö –∏ –ø—Ä–∞–≤–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id

    # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑–µ
    groups_result = await session.execute(select(Group))
    all_groups = groups_result.scalars().all()

    await message.answer(f"üìä –í—Å–µ–≥–æ –≥—Ä—É–ø–ø –≤ –±–∞–∑–µ: {len(all_groups)}")

    # –í—ã–≤–æ–¥–∏–º –≥—Ä—É–ø–ø—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω –ø–æ –Ω–∞—à–µ–π –ë–î
    admin_groups_query = (
        select(Group)
        .outerjoin(UserGroup, Group.chat_id == UserGroup.group_id)
        .where(or_(
            Group.creator_user_id == user_id,
            UserGroup.user_id == user_id
        ))
    )
    admin_groups_result = await session.execute(admin_groups_query)
    admin_groups = admin_groups_result.scalars().all()

    await message.answer(f"üëë –í—ã –∞–¥–º–∏–Ω –≤ {len(admin_groups)} –≥—Ä—É–ø–ø–∞—Ö –ø–æ –ë–î:")
    for g in admin_groups:
        await message.answer(f"- {g.title} (ID: {g.chat_id})")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –≤ UserGroup
    user_group_result = await session.execute(
        select(UserGroup).where(UserGroup.user_id == user_id)
    )
    user_groups = user_group_result.scalars().all()

    await message.answer(f"üîó –°–≤—è–∑–µ–π UserGroup –¥–ª—è –≤–∞—Å: {len(user_groups)}")
    for ug in user_groups:
        await message.answer(f"- Group ID: {ug.group_id}")

    # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
    await message.answer("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø:")
    for g in all_groups:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ UserGroup –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        is_in_user_group = any(ug.group_id == g.chat_id for ug in user_groups)
        is_creator = g.creator_user_id == user_id

        status = []
        if is_creator:
            status.append("üëë –°–æ–∑–¥–∞—Ç–µ–ª—å")
        if is_in_user_group:
            status.append("‚úÖ –í UserGroup")

        status_str = ", ".join(status) if status else "‚ùå –ù–µ—Ç –ø—Ä–∞–≤"

        await message.answer(
            f"Group: {g.title} | Creator: {g.creator_user_id} | Chat ID: {g.chat_id}\n"
            f"–í–∞—à —Å—Ç–∞—Ç—É—Å: {status_str}"
        )
from aiogram import Router, F, Bot
from aiogram.types import ChatMemberUpdated, Message, ChatPermissions, CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import ChatMemberUpdatedFilter, Command
from aiogram.enums import ChatMemberStatus, ChatType
from datetime import datetime, timedelta
import asyncio
from bot.services.redis_conn import redis

new_member_requested_handler = Router()


@new_member_requested_handler.callback_query(F.data == "new_member_requested_handler_settings")
async def process_mute_settings(callback: CallbackQuery):
    user_id = callback.from_user.id
    group_id = await redis.hget(f"user:{user_id}", "group_id")

    if not group_id:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ –≥—Ä—É–ø–ø–µ. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å' –≤ –≥—Ä—É–ø–ø–µ.")
        await callback.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º—É—Ç–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
    mute_enabled = await redis.get(f"group:{group_id}:mute_new_members")
    status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if mute_enabled == "1" else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–∞–ª–æ—á–∫–æ–π –ø–µ—Ä–µ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    enable_text = "‚úì –í–∫–ª—é—á–∏—Ç—å" if mute_enabled == "1" else "–í–∫–ª—é—á–∏—Ç—å"
    disable_text = "‚úì –í—ã–∫–ª—é—á–∏—Ç—å" if mute_enabled != "1" else "–í—ã–∫–ª—é—á–∏—Ç—å"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=enable_text, callback_data="mute_new_members:enable"),
            InlineKeyboardButton(text=disable_text, callback_data="mute_new_members:disable")
        ],
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="show_settings")]
    ])

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text –≤–º–µ—Å—Ç–æ answer –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_text(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º—É—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:\n\n"
        f"‚Ä¢ –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –º—É—Ç\n"
        f"‚Ä¢ –ú—É—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç 3660 –¥–Ω–µ–π\n"
        f"‚Ä¢ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {status}\n\n"
        f"–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞—â–∏—â–∞–µ—Ç –≤–∞—à—É –≥—Ä—É–ø–ø—É –æ—Ç —Å–ø–∞–º–µ—Ä–æ–≤.",
        reply_markup=keyboard
    )


# ‚úÖ –ú—É—Ç —á–µ—Ä–µ–∑ RESTRICTED —Å—Ç–∞—Ç—É—Å (–∫–æ–≥–¥–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∏–¥—ë—Ç —á–µ—Ä–µ–∑ join_request)
@new_member_requested_handler.chat_member(
    F.chat.type.in_({"group", "supergroup"}),
    ChatMemberUpdatedFilter(
        member_status_changed=(None, ChatMemberStatus.RESTRICTED)
    )
)
async def mute_handler(event: ChatMemberUpdated):
    """–ú—É—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏–µ"""
    await mute_unapproved_member(event)


# ‚úÖ –í–∞—Ä–∏–∞–Ω—Ç 2: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ chat_member –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
@new_member_requested_handler.chat_member(
    F.chat.type.in_({"group", "supergroup"})
)
async def manually_mute_on_approval(event: ChatMemberUpdated):
    """–ú—É—Ç –≤—Ä—É—á–Ω—É—é –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ Telegram –ø—Ä–∏—Å–ª–∞–ª —Å–æ–±—ã—Ç–∏–µ"""
    try:
        old_status = event.old_chat_member.status
        new_status = event.new_chat_member.status

        print(f"[V2] –û–±—Ä–∞–±–æ—Ç–∫–∞ chat_member: {event.from_user.id} | old={old_status} -> new={new_status}")

        if old_status in ("left", "kicked") and new_status == "member":
            user = event.new_chat_member.user
            chat = event.chat

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º—É—Ç –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
            mute_enabled = await redis.get(f"group:{chat.id}:mute_new_members")
            if not mute_enabled or mute_enabled != "1":
                print(f"–ú—É—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã {chat.id} –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return

            await event.bot.restrict_chat_member(
                chat_id=chat.id,
                user_id=user.id,
                permissions=ChatPermissions(
                    can_send_messages=False,
                    can_send_media_messages=False,
                    can_send_polls=False,
                    can_send_other_messages=False,
                    can_add_web_page_previews=False,
                    can_change_info=False,
                    can_invite_users=False,
                    can_pin_messages=False
                ),
                until_date=datetime.now() + timedelta(days=366 * 10)
            )

            await asyncio.sleep(1)
            print(f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –±—ã–ª –∑–∞–º—å—é—á–µ–Ω –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è (chat_member).")
        else:
            print(f"[V2] –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: —Å—Ç–∞—Ç—É—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç. old={old_status}, new={new_status}")

    except Exception as e:
        print(f"MUTE ERROR (variant 2 - manual chat_member): {str(e)}")


# ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤
@new_member_requested_handler.chat_member(
    F.chat.type.in_({"group", "supergroup"}),
    ChatMemberUpdatedFilter(
        member_status_changed=(ChatMemberStatus.RESTRICTED, ChatMemberStatus.MEMBER)
    )
)
async def recheck_approved_member(event: ChatMemberUpdated):
    """–ü–æ–≤—Ç–æ—Ä–Ω–æ –º—É—Ç–∏–º, –µ—Å–ª–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"""
    await mute_unapproved_member(event)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –º—É—Ç–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@new_member_requested_handler.callback_query(F.data == "mute_new_members:enable")
async def enable_mute_new_members(callback: CallbackQuery):
    user_id = callback.from_user.id
    group_id = await redis.hget(f"user:{user_id}", "group_id")

    if not group_id:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ –≥—Ä—É–ø–ø–µ.")
        await callback.answer()
        return

    # –í–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –º—É—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã
    await redis.set(f"group:{group_id}:mute_new_members", "1")

    await callback.answer("‚úÖ –§—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞")
    await process_mute_settings(callback)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏


@new_member_requested_handler.callback_query(F.data == "mute_new_members:disable")
async def disable_mute_new_members(callback: CallbackQuery):
    user_id = callback.from_user.id
    group_id = await redis.hget(f"user:{user_id}", "group_id")

    if not group_id:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ –≥—Ä—É–ø–ø–µ.")
        await callback.answer()
        return

    # –í—ã–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –º—É—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã
    await redis.set(f"group:{group_id}:mute_new_members", "0")

    await callback.answer("‚ùå –§—É–Ω–∫—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞")
    await process_mute_settings(callback)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏


async def mute_unapproved_member(event: ChatMemberUpdated):
    """–ú—É—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏–µ"""
    try:
        if getattr(event.new_chat_member, 'is_approved', True):
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º—É—Ç –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        chat_id = event.chat.id
        mute_enabled = await redis.get(f"group:{chat_id}:mute_new_members")

        if not mute_enabled or mute_enabled != "1":
            print(f"–ú—É—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id} –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return

        user = event.new_chat_member.user
        chat = event.chat

        await event.bot.restrict_chat_member(
            chat_id=chat.id,
            user_id=user.id,
            permissions=ChatPermissions(
                can_send_messages=False,
                can_send_media_messages=False,
                can_send_polls=False,
                can_send_other_messages=False,
                can_add_web_page_previews=False,
                can_change_info=False,
                can_invite_users=False,
                can_pin_messages=False
            ),
            until_date=datetime.now() + timedelta(days=366)
        )

        await asyncio.sleep(1)
        await event.bot.send_message(
            chat_id=chat.id,
            text=f"üö´ –°–ø–∞–º–µ—Ä @{user.username} –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º—å—é—á–µ–Ω."
        )
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} (ID: {user.id}) –∑–∞–º—å—é—á–µ–Ω –≤ –≥—Ä—É–ø–ø–µ {chat.id}")

    except Exception as e:
        print(f"MUTE ERROR: {str(e)}")
import random
import asyncio
from datetime import datetime, timedelta
import logging
import re

from aiogram import Router, F
from aiogram.types import ChatJoinRequest, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types.chat_permissions import ChatPermissions
from aiogram.fsm.context import FSMContext

from bot.services.redis_conn import redis
from bot.utils.logger import TelegramLogHandler

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.addHandler(TelegramLogHandler())

captcha_handler = Router()


@captcha_handler.chat_join_request()
async def handle_join_request(request: ChatJoinRequest):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å –∫–∞–ø—á–µ–π"""
    try:
        chat_id = request.chat.id
        user_id = request.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∫–∞–ø—á–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        captcha_enabled = await redis.hget(f"group:{chat_id}", "captcha_enabled")

        if not captcha_enabled or captcha_enabled != "1":
            logger.info(f"–ö–∞–ø—á–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id} –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat = await request.bot.get_chat(chat_id)
        chat_link = chat.username if chat.username else f"t.me/+{chat.invite_link.split('/')[-1]}"

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ø—á–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        prev_msg_id_key = f"captcha_msg:{chat_id}:{user_id}"
        prev_msg_id = await redis.get(prev_msg_id_key)
        if prev_msg_id:
            try:
                await request.bot.delete_message(user_id, int(prev_msg_id))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ø—á–∏: {str(e)}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É
        num1 = random.randint(1, 20)
        num2 = random.randint(1, 20)
        operation = random.choice(['+', '-', '*'])

        if operation == '+':
            answer = num1 + num2
        elif operation == '-':
            # –î–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º
            if num1 < num2:
                num1, num2 = num2, num1
            answer = num1 - num2
        else:  # operation == '*'
            # –î–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–∏–µ —á–∏—Å–ª–∞
            num1 = random.randint(1, 10)
            num2 = random.randint(1, 10)
            answer = num1 * num2

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        wrong_answers = [
            answer + random.randint(1, 5),
            answer - random.randint(1, 5),
            answer + random.randint(6, 10)
        ]

        if 0 in wrong_answers:
            wrong_answers[wrong_answers.index(0)] = answer + 11

        options = wrong_answers + [answer]
        random.shuffle(options)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ Redis
        captcha_key = f"captcha:{chat_id}:{user_id}"
        await redis.set(captcha_key, str(answer), ex=70)  # —Ö—Ä–∞–Ω–∏—Ç—å 70 —Å–µ–∫—É–Ω–¥ (—Ç–∞–π–º-–∞—É—Ç –∫–∞–ø—á–∏)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = []
        row = []
        for i, option in enumerate(options):
            if i > 0 and i % 2 == 0:
                keyboard.append(row)
                row = []
            callback_data = f"captcha_{user_id}_{chat_id}_{option}"
            row.append(InlineKeyboardButton(text=str(option), callback_data=callback_data))

        if row:
            keyboard.append(row)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π
        msg = await request.bot.send_message(
            user_id,
            f"üëã –ü—Ä–∏–≤–µ—Ç, {request.from_user.first_name}!\n\n"
            f"–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ <a href='https://{chat_link}'>{request.chat.title}</a>, "
            f"–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ—à–∏—Ç–µ –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É:\n\n"
            f"<b>{num1} {operation} {num2} = ?</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ø—á–µ–π
        await redis.set(prev_msg_id_key, str(msg.message_id), ex=70)

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞–ø—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É {chat_id}")

        # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∫–∞–ø—á–∏ (1 –º–∏–Ω—É—Ç–∞)
        asyncio.create_task(captcha_timeout(request, captcha_key, prev_msg_id_key))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {str(e)}")


@captcha_handler.callback_query(F.data.startswith("captcha_"))
async def process_captcha_answer(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–∞–ø—á—É"""
    try:
        parts = callback.data.split("_")
        if len(parts) != 4:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return

        _, user_id, chat_id, answer = parts
        user_id, chat_id, answer = int(user_id), int(chat_id), int(answer)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –ø—Ä–∏—à–µ–ª –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if callback.from_user.id != user_id:
            await callback.answer("–≠—Ç–∞ –∫–∞–ø—á–∞ –Ω–µ –¥–ª—è –≤–∞—Å", show_alert=True)
            return

        captcha_key = f"captcha:{chat_id}:{user_id}"
        prev_msg_id_key = f"captcha_msg:{chat_id}:{user_id}"

        correct_answer_str = await redis.get(captcha_key)
        if correct_answer_str is None:
            await callback.answer("–í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏ –∏—Å—Ç–µ–∫–ª–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑.",
                                  show_alert=True)
            return
        correct_answer = int(correct_answer_str)

        if answer == correct_answer:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            await callback.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç.", show_alert=True)

            # –û–¥–æ–±—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
            try:
                bot = callback.bot
                await bot.approve_chat_join_request(chat_id=chat_id, user_id=user_id)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {chat_id}")

                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
                chat = await bot.get_chat(chat_id)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π
                success_msg = await callback.message.edit_text(
                    f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ {chat.title}!",
                    reply_markup=None
                )

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                asyncio.create_task(delete_message_after_delay(bot, user_id, success_msg.message_id, 5))

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
                user_mention = f"@{callback.from_user.username}" if callback.from_user.username else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.first_name}"
                group_msg = await bot.send_message(
                    chat_id=chat_id,
                    text=f"‚úÖ {user_mention} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥—Ä—É–ø–ø–µ!"
                )

                # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                asyncio.create_task(delete_message_after_delay(bot, chat_id, group_msg.message_id, 30))

                # –£–¥–∞–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ Redis
                await redis.delete(captcha_key)
                await redis.delete(prev_msg_id_key)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
                error_msg = await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                asyncio.create_task(delete_message_after_delay(bot, user_id, error_msg.message_id, 5))
        else:
            # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∞–≤–∏–ª–µ–Ω, –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
            await callback.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ.", show_alert=True)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π
            error_msg = await callback.message.edit_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å–Ω–æ–≤–∞.",
                reply_markup=None
            )

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            asyncio.create_task(delete_message_after_delay(callback.bot, user_id, error_msg.message_id, 5))

            # –£–¥–∞–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ Redis
            await redis.delete(captcha_key)
            await redis.delete(prev_msg_id_key)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–ø—á—É: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def captcha_timeout(request: ChatJoinRequest, captcha_key: str, prev_msg_id_key: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∫–∞–ø—á–∏"""
    await asyncio.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∫–ª—é—á –≤ Redis
    if await redis.exists(captcha_key):
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            prev_msg_id = await redis.get(prev_msg_id_key)

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π
            if prev_msg_id:
                try:
                    await request.bot.delete_message(request.from_user.id, int(prev_msg_id))
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ø—á–∏: {str(e)}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
            timeout_msg = await request.bot.send_message(
                request.from_user.id,
                "‚è∞ –í—Ä–µ–º—è –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏ –∏—Å—Ç–µ–∫–ª–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É."
            )

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            asyncio.create_task(
                delete_message_after_delay(request.bot, request.from_user.id, timeout_msg.message_id, 5))

            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request.from_user.id} –Ω–µ —Ä–µ—à–∏–ª –∫–∞–ø—Ç—á—É –≤–æ–≤—Ä–µ–º—è (—Ç–∞–π–º–∞—É—Ç) –¥–ª—è –≥—Ä—É–ø–ø—ã {request.chat.id}")

            # –£–¥–∞–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ Redis
            await redis.delete(captcha_key)
            await redis.delete(prev_msg_id_key)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–π–º–∞—É—Ç–∞ –∫–∞–ø—á–∏: {str(e)}")


async def delete_message_after_delay(bot, chat_id, message_id, delay_seconds):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
    await asyncio.sleep(delay_seconds)
    try:
        await bot.delete_message(chat_id, message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {str(e)}")
import random
import asyncio
from datetime import datetime, timedelta
import logging
import re

from aiogram import Router, F
from aiogram.types import ChatJoinRequest, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types.chat_permissions import ChatPermissions
from aiogram.fsm.context import FSMContext

from sqlalchemy.future import select
from sqlalchemy import delete, insert, update
from sqlalchemy.ext.asyncio import AsyncSession

from bot.database.models import CaptchaSettings, CaptchaMessageId, CaptchaAnswer, TimeoutMessageId
from bot.database.session import get_session
from bot.utils.logger import TelegramLogHandler

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.addHandler(TelegramLogHandler())

captcha_handler = Router()


@captcha_handler.chat_join_request()
async def handle_join_request(request: ChatJoinRequest):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å –∫–∞–ø—á–µ–π"""
    try:
        chat_id = request.chat.id
        user_id = request.from_user.id

        # üßπ –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞ (–µ—Å–ª–∏ –±—ã–ª–æ)
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞ (–µ—Å–ª–∏ –±—ã–ª–æ)
        try:
            async with get_session() as session:
                result = await session.execute(
                    select(TimeoutMessageId.message_id).where(
                        TimeoutMessageId.user_id == user_id,
                        TimeoutMessageId.chat_id == chat_id
                    )
                )
                timeout_msg_id = result.scalar_one_or_none()

                if timeout_msg_id:
                    await request.bot.delete_message(user_id, timeout_msg_id)
                    await session.execute(
                        delete(TimeoutMessageId).where(
                            TimeoutMessageId.user_id == user_id,
                            TimeoutMessageId.chat_id == chat_id
                        )
                    )
                    await session.commit()
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞ {timeout_msg_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–π–º–∞—É—Ç-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            print(f"üßπ –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ç–∞–π–º–∞—É—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {user_id} –≤ {chat_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∫–∞–ø—á–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        async with get_session() as session:
            query = select(CaptchaSettings).where(
                CaptchaSettings.group_id == chat_id
            )
            result = await session.execute(query)
            captcha_settings = result.scalar_one_or_none()

            captcha_enabled = False
            if captcha_settings:
                captcha_enabled = captcha_settings.is_enabled
                print(
                    f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ø—á–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}, —Å—Ç–∞—Ç—É—Å: {'–≤–∫–ª—é—á–µ–Ω–æ' if captcha_enabled else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}")
            else:
                logger.warning(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ø—á–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å...")
                print(f"‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ø—á–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å...")

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–π –∫–∞–ø—á–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                insert_query = insert(CaptchaSettings).values(
                    group_id=chat_id,
                    is_enabled=False,
                    created_at=datetime.now()
                )
                await session.execute(insert_query)
                await session.commit()
                # üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Redis
                await redis.hset(f"group:{chat_id}", "captcha_enabled", "0")
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–ø—á–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")

        if not captcha_enabled:
            logger.info(f"–ö–∞–ø—á–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id} –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
            print(f"‚õî –ö–∞–ø—á–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id} –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
            return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat = await request.bot.get_chat(chat_id)
        # –ë–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
        chat_title = chat.title

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ø—á–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with get_session() as session:
            query = select(CaptchaMessageId.message_id).where(
                CaptchaMessageId.user_id == user_id,
                CaptchaMessageId.chat_id == chat_id
            )
            result = await session.execute(query)
            prev_msg_id = result.scalar_one_or_none()

            if prev_msg_id:
                try:
                    await request.bot.delete_message(user_id, prev_msg_id)
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ø—á–∏: {str(e)}")
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ø—á–∏: {str(e)}")

                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã
                delete_query = delete(CaptchaMessageId).where(
                    CaptchaMessageId.user_id == user_id,
                    CaptchaMessageId.chat_id == chat_id
                )
                await session.execute(delete_query)
                await session.commit()
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–∞–ø—á–∏ –∏–∑ –ë–î")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É
        num1 = random.randint(1, 20)
        num2 = random.randint(1, 20)
        operation = random.choice(['+', '-', '*'])

        if operation == '+':
            answer = num1 + num2
        elif operation == '-':
            # –î–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º
            if num1 < num2:
                num1, num2 = num2, num1
            answer = num1 - num2
        else:  # operation == '*'
            # –î–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–∏–µ —á–∏—Å–ª–∞
            num1 = random.randint(1, 10)
            num2 = random.randint(1, 10)
            answer = num1 * num2

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        wrong_answers = [
            answer + random.randint(1, 5),
            answer - random.randint(1, 5),
            answer + random.randint(6, 10)
        ]

        if 0 in wrong_answers:
            wrong_answers[wrong_answers.index(0)] = answer + 11

        options = wrong_answers + [answer]
        random.shuffle(options)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        expiration_time = datetime.now() + timedelta(seconds=70)
        async with get_session() as session:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            delete_query = delete(CaptchaAnswer).where(
                CaptchaAnswer.user_id == user_id,
                CaptchaAnswer.chat_id == chat_id
            )
            await session.execute(delete_query)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            insert_query = insert(CaptchaAnswer).values(
                user_id=user_id,
                chat_id=chat_id,
                answer=str(answer),
                expires_at=expiration_time
            )
            await session.execute(insert_query)
            await session.commit()
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç–≤–µ—Ç {answer} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –ë–î")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = []
        row = []
        for i, option in enumerate(options):
            if i > 0 and i % 2 == 0:
                keyboard.append(row)
                row = []
            callback_data = f"captcha_{user_id}_{chat_id}_{option}"
            row.append(InlineKeyboardButton(text=str(option), callback_data=callback_data))

        if row:
            keyboard.append(row)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
        try:
            chat_link = f"https://t.me/{chat.username}" if chat.username else (
                await request.bot.export_chat_invite_link(chat_id))
        except Exception as e:
            chat_link = ""
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É: {e}")

        group_name_clickable = f"<a href='{chat_link}'>{chat.title}</a>" if chat_link else f"<b>{chat.title}</b>"

        msg = await request.bot.send_message(
            user_id,
            f"üëã –ü—Ä–∏–≤–µ—Ç, {request.from_user.first_name}!\n\n"
            f"–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ {group_name_clickable}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ—à–∏—Ç–µ –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É:\n\n"
            f"<b>{num1} {operation} {num2} = ?</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML",
            disable_web_page_preview=True
        )

        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ø—á–µ–π
        async with get_session() as session:
            insert_query = insert(CaptchaMessageId).values(
                user_id=user_id,
                chat_id=chat_id,
                message_id=msg.message_id,
                expires_at=expiration_time
            )
            await session.execute(insert_query)
            await session.commit()
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ø—á–µ–π {msg.message_id} –≤ –ë–î")

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞–ø—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É {chat_id}")
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞–ø—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É {chat_id}")

        # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∫–∞–ø—á–∏ (1 –º–∏–Ω—É—Ç–∞)
        asyncio.create_task(captcha_timeout(request, user_id, chat_id))

    except Exception as e:

        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {str(e)}")

        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {str(e)}")


@captcha_handler.callback_query(F.data.startswith("captcha_"))
async def process_captcha_answer(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–∞–ø—á—É"""
    try:
        parts = callback.data.split("_")
        if len(parts) != 4:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ callback: {callback.data}")
            return

        _, user_id, chat_id, answer = parts
        user_id, chat_id, answer = int(user_id), int(chat_id), int(answer)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –ø—Ä–∏—à–µ–ª –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if callback.from_user.id != user_id:
            await callback.answer("–≠—Ç–∞ –∫–∞–ø—á–∞ –Ω–µ –¥–ª—è –≤–∞—Å", show_alert=True)
            print(f"‚õî –ü–æ–ø—ã—Ç–∫–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id} –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–∞–ø—á—É –¥–ª—è {user_id}")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with get_session() as session:
            query = select(CaptchaAnswer.answer).where(
                CaptchaAnswer.user_id == user_id,
                CaptchaAnswer.chat_id == chat_id,
                CaptchaAnswer.expires_at > datetime.now()
            )
            result = await session.execute(query)
            correct_answer_str = result.scalar_one_or_none()

        if correct_answer_str is None:
            await callback.answer("–í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏ –∏—Å—Ç–µ–∫–ª–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑.",
                                  show_alert=True)
            print(f"‚è∞ –í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏ –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return

        correct_answer = int(correct_answer_str)

        if answer == correct_answer:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            await callback.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç.", show_alert=True)
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∫–∞–ø—á—É")

            # –û–¥–æ–±—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
            try:
                bot = callback.bot
                await bot.approve_chat_join_request(chat_id=chat_id, user_id=user_id)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {chat_id}")
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {chat_id}")

                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
                chat = await bot.get_chat(chat_id)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π
                success_msg = await callback.message.edit_text(
                    f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ {chat.title}!",
                    reply_markup=None
                )
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ")

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∞–π–º–∞—É—Ç–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                try:
                    async with get_session() as session:
                        timeout_query = select(TimeoutMessageId.message_id).where(
                            TimeoutMessageId.user_id == user_id,
                            TimeoutMessageId.chat_id == chat_id
                        )
                        timeout_result = await session.execute(timeout_query)
                        timeout_msg_id = timeout_result.scalar_one_or_none()

                        if timeout_msg_id:
                            await bot.delete_message(user_id, timeout_msg_id)
                            await session.execute(
                                delete(TimeoutMessageId).where(
                                    TimeoutMessageId.user_id == user_id,
                                    TimeoutMessageId.chat_id == chat_id
                                )
                            )
                            await session.commit()
                            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∞–π–º–∞—É—Ç–µ {timeout_msg_id}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–∞–π–º–∞—É—Ç–µ: {e}")

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                asyncio.create_task(delete_message_after_delay(bot, user_id, success_msg.message_id, 10))

                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
                user_mention = f"<a href='tg://user?id={user_id}'>{callback.from_user.first_name}</a>"
                chat_title = chat.title

                # –ü–æ–ª—É—á–∞–µ–º invite link (–µ—Å–ª–∏ –ø—É–±–ª–∏—á–Ω–∞—è –≥—Ä—É–ø–ø–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º username)
                try:
                    chat_link = f"https://t.me/{chat.username}" if chat.username else (
                        await bot.export_chat_invite_link(chat_id))
                except Exception as e:
                    chat_link = ""
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É: {e}")

                user_msg = await bot.send_message(
                    chat_id=user_id,
                    text=f"‚úÖ {user_mention} –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∫–∞–ø—á—É –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ "
                         f"<b><a href='{chat_link}'>{chat.title}</a></b>!",
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )

                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤ –≥—Ä—É–ø–ø—É")

                # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –õ–° —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                asyncio.create_task(delete_message_after_delay(bot, user_id, user_msg.message_id, 30))

                # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
                async with get_session() as session:
                    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –∫–∞–ø—á–µ–π
                    delete_msg_query = delete(CaptchaMessageId).where(
                        CaptchaMessageId.user_id == user_id,
                        CaptchaMessageId.chat_id == chat_id
                    )
                    await session.execute(delete_msg_query)

                    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
                    delete_answer_query = delete(CaptchaAnswer).where(
                        CaptchaAnswer.user_id == user_id,
                        CaptchaAnswer.chat_id == chat_id
                    )
                    await session.execute(delete_answer_query)
                    await session.commit()
                    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ –∫–∞–ø—á–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
                error_msg = await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                asyncio.create_task(delete_message_after_delay(bot, user_id, error_msg.message_id, 5))
        else:
            # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∞–≤–∏–ª–µ–Ω, –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
            await callback.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ.", show_alert=True)
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∫–∞–ø—á—É")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
                chat = await callback.bot.get_chat(chat_id)
                chat_title = chat.title

                # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
                try:
                    chat_link = f"https://t.me/{chat.username}" if chat.username else (
                        await callback.bot.export_chat_invite_link(chat_id))
                except Exception as e:
                    chat_link = ""
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É: {e}")

                group_name_clickable = f"<a href='{chat_link}'>{chat_title}</a>" if chat_link else f"<b>{chat_title}</b>"

                error_msg = await callback.message.edit_text(
                    f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É {group_name_clickable} —Å–Ω–æ–≤–∞.",
                    reply_markup=None,
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )

                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç)")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π –∫–∞–ø—á–∏: {str(e)}")
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π –∫–∞–ø—á–∏: {str(e)}")

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
            asyncio.create_task(delete_message_after_delay(callback.bot, user_id, error_msg.message_id, 60))

            # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            async with get_session() as session:
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –∫–∞–ø—á–µ–π
                delete_msg_query = delete(CaptchaMessageId).where(
                    CaptchaMessageId.user_id == user_id,
                    CaptchaMessageId.chat_id == chat_id
                )
                await session.execute(delete_msg_query)

                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
                delete_answer_query = delete(CaptchaAnswer).where(
                    CaptchaAnswer.user_id == user_id,
                    CaptchaAnswer.chat_id == chat_id
                )
                await session.execute(delete_answer_query)
                await session.commit()
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ –∫–∞–ø—á–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç)")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–ø—á—É: {str(e)}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–ø—á—É: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def captcha_timeout(request: ChatJoinRequest, user_id: int, chat_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∫–∞–ø—á–∏"""
    await asyncio.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    async with get_session() as session:
        query = select(CaptchaAnswer).where(
            CaptchaAnswer.user_id == user_id,
            CaptchaAnswer.chat_id == chat_id,
            CaptchaAnswer.expires_at > datetime.now()
        )
        result = await session.execute(query)
        captcha_data = result.scalars().first()

    if captcha_data:
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            async with get_session() as session:
                msg_query = select(CaptchaMessageId.message_id).where(
                    CaptchaMessageId.user_id == user_id,
                    CaptchaMessageId.chat_id == chat_id
                )
                result = await session.execute(msg_query)
                prev_msg_id = result.scalar_one_or_none()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–ø—á–∞ –µ—â–µ –Ω–µ —Ä–µ—à–µ–Ω–∞
                captcha_check = await session.execute(
                    select(CaptchaAnswer).where(
                        CaptchaAnswer.user_id == user_id,
                        CaptchaAnswer.chat_id == chat_id
                    )
                )
                if not captcha_check.scalars().first():
                    # –ö–∞–ø—á–∞ —É–∂–µ —Ä–µ—à–µ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
                    print(f"‚úÖ –ö–∞–ø—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ —Ä–µ—à–µ–Ω–∞, –æ—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–∞—É—Ç")
                    return

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π
            if prev_msg_id:
                try:
                    await request.bot.delete_message(user_id, prev_msg_id)
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π {prev_msg_id} (—Ç–∞–π–º–∞—É—Ç)")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ø—á–∏: {str(e)}")
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ø—á–∏: {str(e)}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
            try:
                chat = await request.bot.get_chat(chat_id)
                chat_link = f"https://t.me/{chat.username}" if chat.username else (
                    await request.bot.export_chat_invite_link(chat_id))
                group_clickable = f"<a href='{chat_link}'>{chat.title}</a>"
            except Exception as e:
                group_clickable = "<b>–≥—Ä—É–ø–ø—É</b>"
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É: {e}")

            timeout_msg = await request.bot.send_message(
                user_id,
                f"‚è∞ –í—Ä–µ–º—è –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏ –∏—Å—Ç–µ–∫–ª–æ.\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ {group_clickable}.",
                parse_mode="HTML",
                disable_web_page_preview=True
            )

            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∞–π–º–∞—É—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–∞–π–º–∞—É—Ç-—Å–æ–æ–±—â–µ–Ω–∏—è
            async with get_session() as session:
                # –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä–æ–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                await session.execute(
                    delete(TimeoutMessageId).where(
                        TimeoutMessageId.user_id == user_id,
                        TimeoutMessageId.chat_id == chat_id
                    )
                )
                await session.execute(
                    insert(TimeoutMessageId).values(
                        user_id=user_id,
                        chat_id=chat_id,
                        message_id=timeout_msg.message_id
                    )
                )
                await session.commit()

            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —Ä–µ—à–∏–ª –∫–∞–ø—Ç—á—É –≤–æ–≤—Ä–µ–º—è (—Ç–∞–π–º–∞—É—Ç) –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
            print(f"‚è∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —Ä–µ—à–∏–ª –∫–∞–ø—Ç—á—É –≤–æ–≤—Ä–µ–º—è –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")

            # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            async with get_session() as session:
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –∫–∞–ø—á–µ–π
                delete_msg_query = delete(CaptchaMessageId).where(
                    CaptchaMessageId.user_id == user_id,
                    CaptchaMessageId.chat_id == chat_id
                )
                await session.execute(delete_msg_query)

                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
                delete_answer_query = delete(CaptchaAnswer).where(
                    CaptchaAnswer.user_id == user_id,
                    CaptchaAnswer.chat_id == chat_id
                )
                await session.execute(delete_answer_query)
                await session.commit()
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ –∫–∞–ø—á–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î (—Ç–∞–π–º–∞—É—Ç)")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–π–º–∞—É—Ç–∞ –∫–∞–ø—á–∏: {str(e)}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–π–º–∞—É—Ç–∞ –∫–∞–ø—á–∏: {str(e)}")


async def delete_message_after_delay(bot, chat_id, message_id, delay_seconds):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
    await asyncio.sleep(delay_seconds)
    try:
        await bot.delete_message(chat_id, message_id)
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞ {chat_id} –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏ {delay_seconds} —Å–µ–∫")
    except Exception as e:
        try:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {str(e)}")
        except AttributeError:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {str(e)}")

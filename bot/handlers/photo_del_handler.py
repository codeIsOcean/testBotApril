# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
import asyncio  # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –∑–∞–¥–µ—Ä–∂–µ–∫
import re  # –î–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
import io  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–π—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
import os  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
import aiohttp  # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è
import tempfile  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
from datetime import datetime, timedelta  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º
import pytesseract  # –î–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
from PIL import Image  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
from aiogram import Router, F  # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery  # –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö Telegram
from sqlalchemy import select, insert, update, delete  # –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

from bot.database.models import ChatSettings, UserRestriction  # –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ë–î
from bot.database.session import get_session  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
from bot.config import BOT_TOKEN

import logging
from bot.utils.logger import TelegramLogHandler

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É –ª–æ–≥–≥–µ—Ä–∞
if not logger.handlers:
    telegram_handler = TelegramLogHandler()
    logger.addHandler(telegram_handler)


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
photo_del_router = Router()


# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL
async def download_image(image_url):
    tmp_file_path = None
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(image_url) as resp:
                if resp.status != 200:
                    return None, None
                img_bytes = await resp.read()
                with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmp_file:
                    tmp_file.write(img_bytes)
                    tmp_file_path = tmp_file.name
                return tmp_file_path, img_bytes
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        return None, None
    finally:
        if tmp_file_path and os.path.exists(tmp_file_path):
            try:
                os.unlink(tmp_file_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}")


FORBIDDEN_WORDS = [
    '–Ω–∞—Ä–∫–æ—Ç–∞', '–Ω–∞—Ä–∫', '–º–µ—Ñ', '–º–µ—Ñ–µ–¥—Ä–æ–Ω', '—Å–µ–∫—Å', '–ø–æ—Ä–Ω–æ', '18+',
    '—Å–ø–∞–π—Å', '–≥–∞—à–∏—à', '–∫–æ–∫–∞–∏–Ω', '–º–∞—Ä–∏—Ö—É–∞–Ω–∞', '—Ç—Ä–∞–≤–∫–∞', '–∑–∞–∫–ª–∞–¥–∫',
    '–∫–ª–∞–¥', '–∫–ª–∞–¥–º–µ–Ω', '—Ç–µ–ª–µ–≥—Ä–∞–º', 't.me', '@', '–∑–∞–∫–ª–∞–¥–∫–∏', '–±–æ—Ç', '—Å–æ–ª—å', '—ç–∫—Å—Ç–∞–∑–∏',
    'weed', 'mdma', 'meth', 'amphetamine', '–∫—Ä–∏—Å—Ç–∞–ª–ª', '–Ω—é–¥—Å', 'nudes', 'cocaine'
]
FORBIDDEN_PATTERNS = [re.compile(r'\b' + re.escape(word) + r'\b') for word in FORBIDDEN_WORDS]
FORBIDDEN_TAGS = ['drugs', 'narcotic', 'weapon', 'nude', 'porn', 'nsfw', 'adult content']


@photo_del_router.message(F.photo)
async def handle_photo(message: Message):
    if message.chat.type in ['group', 'supergroup']:
        chat_id = message.chat.id
        user_id = message.from_user.id

        async with get_session() as session:
            query = select(ChatSettings).where(ChatSettings.chat_id == chat_id)
            result = await session.execute(query)
            settings = result.scalar_one_or_none()
            if not settings or not settings.enable_photo_filter:
                return

            chat_member = await message.chat.get_member(user_id)
            if chat_member.status in ['creator', 'administrator'] and settings.admins_bypass_photo_filter:
                return

        forbidden_content_found = False
        reason = ""
        found_words = []

        if message.caption:
            caption_lower = message.caption.lower()
            for pattern, word in zip(FORBIDDEN_PATTERNS, FORBIDDEN_WORDS):
                if pattern.search(caption_lower):
                    found_words.append(word)
            if found_words:
                forbidden_content_found = True
                reason = f"–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ: {', '.join(found_words)}"

        if not forbidden_content_found:
            photo = message.photo[-1]
            file_id = photo.file_id
            try:
                file = await message.bot.get_file(file_id)
                file_path = file.file_path
                file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"

                is_forbidden, image_reason = await check_image_content(file_url)
                if is_forbidden:
                    forbidden_content_found = True
                    reason = image_reason

                if not forbidden_content_found:
                    image_text = await extract_text_from_image(file_url)
                    if image_text:
                        image_text_lower = image_text.lower()
                        for pattern, word in zip(FORBIDDEN_PATTERNS, FORBIDDEN_WORDS):
                            if pattern.search(image_text_lower):
                                forbidden_content_found = True
                                reason = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: {word}"
                                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

        if forbidden_content_found:
            try:
                await message.delete()

                async with get_session() as session:
                    query = select(ChatSettings).where(ChatSettings.chat_id == chat_id)
                    result = await session.execute(query)
                    settings = result.scalar_one_or_none()
                    mute_minutes = settings.photo_filter_mute_minutes if settings else 60

                until_date = datetime.now() + timedelta(minutes=mute_minutes)

                await message.chat.restrict(
                    user_id,
                    permissions=message.chat.permissions.model_copy(update={"can_send_messages": False}),
                    until_date=until_date
                )

                async with get_session() as session:
                    await session.execute(
                        insert(UserRestriction).values(
                            user_id=user_id,
                            chat_id=chat_id,
                            restriction_type="mute",
                            reason=reason,
                            expires_at=until_date
                        )
                    )
                    await session.commit()

                notification = await message.answer(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.mention_html()} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ —Å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º.\n"
                    f"üîá –í—ã–¥–∞–Ω –º—É—Ç –Ω–∞ {mute_minutes} –º–∏–Ω—É—Ç."
                )

                asyncio.create_task(delete_message_after_delay(message.bot, chat_id, notification.message_id, 30))

                logger.info(
                    f"–£–¥–∞–ª–µ–Ω–æ —Ñ–æ—Ç–æ —Å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}: {reason}"
                )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ —Å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
import asyncio
import re
import os
import aiohttp
import tempfile
from datetime import datetime, timedelta
from PIL import Image
from aiogram import Router, F
from aiogram.types import Message
from aiogram.types import ChatPermissions
from sqlalchemy import select, insert
import pytesseract

from bot.database.models import ChatSettings, UserRestriction
from bot.database.session import get_session
from bot.config import BOT_TOKEN

import logging
from bot.utils.logger import TelegramLogHandler
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
if not logger.handlers:
    telegram_handler = TelegramLogHandler()
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    telegram_handler.setFormatter(formatter)
    logger.addHandler(telegram_handler)

photo_del_router = Router()

FORBIDDEN_WORDS = [
    '–¥–æ—Å—Ç–∞–≤–∫–∞', '—Ä–∞–±–æ—Ç–∞–µ–º', '–∏—â–∏—Ç–µ', '–ø–æ–∏—Å–∫', '–ø–æ–∏—Å–∫–µ', '–≤ –ø–æ–∏—Å–∫–µ', '–≤–ø–æ–∏—Å–∫–µ',
    '–≥–∞—Ä–∞–Ω—Ç–∏—è', '–æ—Ç–∑—ã–≤—ã', '–æ—Ç—Ä–∞–±–æ—Ç–∫–∏', '–∫–ª–∞–¥', '–∑–∞–∫–ª–∞–¥–∫–∏', '–∑–∞–∫–ª–∞–¥–∫–∞', '–∫–ª–∞–¥–º–µ–Ω',
    '–±–æ—Ç', '–±–æ—Ç–∞', '—Å–¥–µ–ª–∫–∞', '—Ä–∞–±–æ—Ç–∞', '—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ', '–≤–∞–∫–∞–Ω—Å–∏–∏', '–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç',
    '–ø—Ä–∞–π—Å', '–º–µ–Ω—é', '–∫–∞—Ç–∞–ª–æ–≥', '–≤—ã–±–æ—Ä', '—Å–æ—Ä—Ç', '–¥–æ–∑—ã', '–Ω–∞—Ä–∫', '–º–µ—Ñ', '–º–µ—Ñ–µ–¥—Ä–æ–Ω',
    '—Å–æ–ª—å', '—Å–∫–æ—Ä–æ—Å—Ç—å', '–∞–º—Ñ', '–∞–º—Ñ–µ—Ç–∞–º–∏–Ω', '–≥–µ—Ä–æ–∏–Ω', '—Å–ø–∞–π—Å', '–ª—Å–¥', '—ç–∫—Å—Ç–∞–∑–∏',
    '–º–¥–º–∞', 'mdma', '–º–µ—Ç', 'meth', '—Ç—Ä–∞–≤–∫–∞', '–º–∞—Ä–∏—Ö—É–∞–Ω–∞', '–∫–æ—Å—è–∫', '–¥—É—Ä—å', '–≥–∞—à–∏—à',
    '–∫–æ–∫–∞–∏–Ω', '–∫—Ä—ç–∫', '–ø–æ—Ä–æ—à–æ–∫', '—Ç–∞–±–ª–µ—Ç–∫–∏', '–∫–∞–ø—Å—É–ª—ã', '—Ñ–µ–Ω', '–Ω—é–¥—Å', 'nudes',
    '18+', '–ø–æ—Ä–Ω–æ', '—Å–µ–∫—Å', '—ç—Ä–æ—Ç–∏–∫–∞', 't.me', '@', '.onion', '.tor', '—á–∞—Ç',
    '—Å–∞–ø–ø–æ—Ä—Ç', '—Å–≤—è–∂–∏—Ç–µ—Å—å', '—Ç–µ–ª–µ–≥–∞', 'telegram', '—Ç–µ–ª–µ–≥—Ä–∞–º', '–≤–∫', 'insta',
    'whatsapp', '–≤–∞–π–±–µ—Ä', '–≤–µ–±–∫–∞–º', '–∑–∞–∫—Ä—ã—Ç–∞—è –≥—Ä—É–ø–ø–∞', '–∫–ª—É–±', '—Å—Ö–µ–º–∞', '—Ç–æ—á–∫–∞',
    '—à–∏—à–∫–∏', '–≥—Ä–∏–±–æ—á–∫–∏', '–±–ª–∞–Ω—Ç', '–∫—Ä–∏—Å—Ç–∞–ª–ª—ã', '—Ç–∞–±–ª—ç—Ç', '–ø–ª–∞–Ω', '—Ç–≥ –±–æ—Ç',
    '—Å–∫–∏–¥–∫–∞', '–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ', '–æ–ø—Ç', '–æ–ø—Ç–æ–º', '–∫—É—Ä—å–µ—Ä', '–∑–∞–∫–∞–∑', '–∫–ª–∏–µ–Ω—Ç',
    '—Ç–µ—Å—Ç–µ—Ä—ã', '–ø—Ä–∏–µ–º'
]
FORBIDDEN_PATTERNS = [re.compile(re.escape(word), re.IGNORECASE) for word in FORBIDDEN_WORDS]
FORBIDDEN_TAGS = ['drugs', 'narcotic', 'weapon', 'nude', 'porn', 'nsfw', 'adult content']


@photo_del_router.message(F.photo)
async def handle_photo(message: Message):
    if message.chat.type not in ['group', 'supergroup']:
        return

    chat_id = message.chat.id
    user_id = message.from_user.id

    async with get_session() as session:
        result = await session.execute(select(ChatSettings).where(ChatSettings.chat_id == chat_id))
        settings = result.scalar_one_or_none()
        if not settings or not settings.enable_photo_filter:
            return

    chat_member = await message.chat.get_member(user_id)
    if chat_member.status in ['creator', 'administrator'] and settings.admins_bypass_photo_filter:
        return

    forbidden_content_found = False
    reason = ""

    if message.caption:
        caption_lower = message.caption.lower()
        for pattern, word in zip(FORBIDDEN_PATTERNS, FORBIDDEN_WORDS):
            if pattern.search(caption_lower):
                forbidden_content_found = True
                reason = f"–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –ø–æ–¥–ø–∏—Å–∏: {word}"
                break

    if not forbidden_content_found:
        try:
            photo = message.photo[-1]
            file = await message.bot.get_file(photo.file_id)
            file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"

            is_forbidden, image_reason = await check_image_content(file_url)
            if is_forbidden:
                forbidden_content_found = True
                reason = image_reason
            else:
                image_text = await extract_text_from_image(file_url)
                logger.info(f"OCR —Ç–µ–∫—Å—Ç: {image_text}")
                for pattern, word in zip(FORBIDDEN_PATTERNS, FORBIDDEN_WORDS):
                    if pattern.search(image_text.lower()):
                        forbidden_content_found = True
                        reason = f"–ó–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: {word}"
                        break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    if forbidden_content_found:
        try:
            await message.delete()
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –º—É—Ç–∞
            if settings.photo_filter_mute_minutes == 0:  # 0 –æ–∑–Ω–∞—á–∞–µ—Ç –º—É—Ç –Ω–∞–≤—Å–µ–≥–¥–∞
                until_date = None  # None –¥–ª—è –≤–µ—á–Ω–æ–≥–æ –º—É—Ç–∞
            else:
                until_date = datetime.now() + timedelta(minutes=int(settings.photo_filter_mute_minutes) if isinstance(settings.photo_filter_mute_minutes, (int, str)) and str(settings.photo_filter_mute_minutes).isdigit() else 60)

            await message.chat.restrict(
                user_id,
                permissions=ChatPermissions(can_send_messages=False),
                until_date=until_date
            )

            async with get_session() as session:
                await session.execute(insert(UserRestriction).values(
                    user_id=user_id, chat_id=chat_id, restriction_type="mute",
                    reason=reason, expires_at=until_date))
                await session.commit()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–æ–≥–∏/–∫–∞–Ω–∞–ª –≤–º–µ—Å—Ç–æ –≥—Ä—É–ø–ø—ã
                log_message = (
                    f"üö´ <b>–§–∏–ª—å—Ç—Ä —Ñ–æ—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª</b>\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (<code>{user_id}</code>)\n"
                    f"üë• –ì—Ä—É–ø–ø–∞: {message.chat.title} (<code>{chat_id}</code>)\n"
                    f"‚è± –ú—É—Ç –Ω–∞: {int(settings.photo_filter_mute_minutes) if isinstance(settings.photo_filter_mute_minutes, (int, str)) and str(settings.photo_filter_mute_minutes).isdigit() else 60} –º–∏–Ω—É—Ç\n"
                    f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
                )

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤ –≤–º–µ—Å—Ç–æ –≥—Ä—É–ø–ø—ã
                log_channel_id = settings.log_channel_id
                if log_channel_id:
                    try:
                        await message.bot.send_message(log_channel_id, log_message, parse_mode="HTML")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤: {e}")

                # –ï—Å–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–∫–ª—é—á–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if settings.show_mute_notifications:
                    group_msg = await message.answer(
                        f"üö´ {message.from_user.mention_html()} –ø–æ–ª—É—á–∏–ª –º—É—Ç –∑–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.",
                        parse_mode="HTML"
                    )
                    asyncio.create_task(delete_message_after_delay(message.bot, chat_id, group_msg.message_id, 30))

                logger.info(f"–ù–∞–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ —á–∞—Ç–µ {chat_id}: {reason}")
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –≤ —á–∞—Ç–µ {chat_id}: {reason}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è: {e}")


async def delete_message_after_delay(bot, chat_id, message_id, delay):
    await asyncio.sleep(delay)
    try:
        await bot.delete_message(chat_id, message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


async def extract_text_from_image(image_url: str) -> str:
    tmp_file_path, _ = await download_image(image_url)
    if not tmp_file_path:
        return ""
    try:
        if not os.path.exists(pytesseract.pytesseract.tesseract_cmd):
            logger.warning("Tesseract –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, OCR –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
            return ""
        image = Image.open(tmp_file_path)
        return pytesseract.image_to_string(image, lang='rus+eng')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OCR: {e}")
        return ""
    finally:
        if os.path.exists(tmp_file_path):
            os.remove(tmp_file_path)

async def check_image_with_yolov5(image_url: str) -> tuple[bool, str]:
    tmp_file_path, _ = await download_image(image_url)
    if not tmp_file_path:
        return False, ""
    try:
        from ultralytics import YOLO
        model = YOLO('yolov5su.pt')
        results = model(tmp_file_path)
        for result in results:
            for cls, conf in zip(result.boxes.cls.tolist(), result.boxes.conf.tolist()):
                class_name = model.names[int(cls)]
                if class_name.lower() in FORBIDDEN_TAGS and conf > 0.5:
                    return True, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –æ–±—ä–µ–∫—Ç: {class_name}"
        return False, ""
    except Exception as e:
        logger.error(f"YOLOv5 –æ—à–∏–±–∫–∞: {e}")
        return False, ""
    finally:
        if os.path.exists(tmp_file_path):
            os.remove(tmp_file_path)


async def check_image_with_opennsfw2(image_url: str) -> tuple[bool, str]:
    # –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª NSFW –ø—Ä–æ–≤–µ—Ä–∫–∏
    # tmp_file_path, img_bytes = await download_image(image_url)
    # if not tmp_file_path:
    #     return False, ""
    #
    # try:
    #     import numpy as np
    #     import tensorflow as tf
    #     from tensorflow.keras.models import load_model
    #     from tensorflow.keras.applications import VGG16
    #     from tensorflow.keras.layers import Dense, Dropout, GlobalAveragePooling2D
    #     from tensorflow.keras.models import Model
    #
    #     model_path = os.path.join('models', 'open_nsfw_weights.h5')
    #     os.makedirs(os.path.dirname(model_path), exist_ok=True)
    #
    #     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–∏ –∏–ª–∏ –µ—ë —Å–æ–∑–¥–∞–Ω–∏–µ
    #     if not os.path.exists(model_path) or os.path.getsize(model_path) < 100000:
    #         logger.warning("–ú–æ–¥–µ–ª—å OpenNSFW2 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É.")
    #         # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    #         image = Image.open(tmp_file_path)
    #         # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–æ—á–µ–Ω—å —É–ø—Ä–æ—â—ë–Ω–Ω–æ)
    #         img_array = np.array(image)
    #         skin_tone_ratio = np.sum((img_array[:, :, 0] > 60) & (img_array[:, :, 0] < 200) &
    #                                  (img_array[:, :, 1] > 40) & (img_array[:, :, 1] < 170) &
    #                                  (img_array[:, :, 2] > 20) & (img_array[:, :, 2] < 170)) / img_array.size
    #
    #         nsfw_score = min(skin_tone_ratio * 4, 0.5)  # –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    #
    #         if nsfw_score > 0.4:
    #             return True, f"–í–æ–∑–º–æ–∂–Ω—ã–π NSFW –∫–æ–Ω—Ç–µ–Ω—Ç (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ {nsfw_score:.2f})"
    #
    #         return False, ""
    #
    #     # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    #     model = load_model(model_path, compile=False)
    #
    #     def preprocess_image(image, target_size):
    #         if image.mode != "RGB":
    #             image = image.convert("RGB")
    #         image = image.resize(target_size, Image.NEAREST)
    #         return np.expand_dims(np.array(image) / 255.0, axis=0)
    #
    #     image = Image.open(tmp_file_path)
    #     prediction = model.predict(preprocess_image(image, (224, 224)))[0]
    #     nsfw_score = float(prediction[1]) if len(prediction) > 1 else 0.0
    #
    #     if nsfw_score > 0.6:
    #         return True, f"NSFW –∫–æ–Ω—Ç–µ–Ω—Ç (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {nsfw_score:.2f})"
    #
    #     return False, ""
    # except Exception as e:
    #     logger.error(f"OpenNSFW2 –æ—à–∏–±–∫–∞: {e}")
    #     return False, ""
    # finally:
    #     if os.path.exists(tmp_file_path):
    #         os.remove(tmp_file_path)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ–≥–¥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
    logger.info("NSFW –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    return False, ""


async def check_image_content(image_url: str) -> tuple[bool, str]:
    try:
        is_forbidden, reason = await check_image_with_yolov5(image_url)
        if is_forbidden:
            return True, reason

        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É NSFW
        # is_forbidden, reason = await check_image_with_opennsfw2(image_url)
        # if is_forbidden:
        #     return True, reason

        return False, ""
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return False, ""


async def download_image(image_url):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(image_url) as resp:
                if resp.status != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ö–æ–¥: {resp.status}")
                    return None, None
                img_bytes = await resp.read()
                with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmp_file:
                    tmp_file.write(img_bytes)
                    return tmp_file.name, img_bytes
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None, None

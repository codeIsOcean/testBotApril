from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.enums import ChatMemberStatus, ChatType
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from redis.asyncio import Redis
import logging
from typing import Optional
from bot.states.group_setup_states import SetupStates

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
try:
    redis = Redis(host='localhost', port=6379, db=0, decode_responses=True)
    logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
    redis = None

group_setup_handler = Router()


async def is_user_admin(bot, chat_id, user_id):
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except Exception as e:
        logger.error(f"Admin check error: {e}")
        return False


async def set_user_group_data(user_id: int, group_id: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ –≤ Redis"""
    if redis is None:
        logger.error("Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return False

    try:
        await redis.hset(f"user:{user_id}", "group_id", str(group_id))
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: –≥—Ä—É–ø–ø–∞ {group_id}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Redis: {e}")
        return False


async def get_user_group_data(user_id: int) -> Optional[int]:
    """–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ –∏–∑ Redis"""
    if redis is None:
        logger.error("Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return None

    try:
        group_id = await redis.hget(f"user:{user_id}", "group_id")
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: –≥—Ä—É–ø–ø–∞ {group_id}")
        if group_id:
            return int(group_id)
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Redis: {e}")
        return None


async def clear_user_data(user_id: int):
    """–û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis"""
    if redis is None:
        logger.error("Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return False

    try:
        await redis.delete(f"user:{user_id}")
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω—ã –∏–∑ Redis")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Redis: {e}")
        return False


@group_setup_handler.callback_query(F.data == "setup_bot")
async def setup_bot_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞' –≤ –≥—Ä—É–ø–ø–µ"""
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id

    logger.info(f"–ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}")

    if not await is_user_admin(callback.bot, chat_id, user_id):
        await callback.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞", show_alert=True)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã {chat_id}")
        return

    me = await callback.bot.get_me()
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –≥–ª—É–±–æ–∫—É—é —Å—Å—ã–ª–∫—É
    setup_link = f"https://t.me/{me.username}?start={chat_id}"
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, –≥–ª—É–±–æ–∫–∞—è —Å—Å—ã–ª–∫–∞: {setup_link}")
    await callback.message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞", url=setup_link)]
        ])
    )
    await callback.answer()

@group_setup_handler.message(CommandStart())
async def handle_start_command(message: Message, state: FSMContext, command: CommandStart):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    user_id = message.from_user.id
    logger.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} (ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /start.")

    # –ï—Å–ª–∏ —ç—Ç–æ –ª–∏—á–Ω–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞
    if message.chat.type == ChatType.PRIVATE:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ
        group_id = await get_user_group_data(user_id)
        current_state = await state.get_state()

        if current_state == SetupStates.waiting_for_setup and group_id:
            await message.answer(
                f"‚úèÔ∏è –í—ã —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã {group_id}.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            await show_setup_menu(message)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await state.clear()
            await clear_user_data(user_id)
            await message.answer(
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø.\n"
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É:\n"
                "1. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É\n"
                "2. –°–¥–µ–ª–∞–π—Ç–µ –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
                "3. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞' –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setup"
            )


async def show_setup_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    await message.answer(
        "üõ† –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üëâ /settings - –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "üë• /admins - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n"
        "üö´ /cancel - –û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data="admins")],
            [InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", callback_data="cancel_setup")]
        ])
    )


@group_setup_handler.message(Command("cancel"))
async def cancel_setup(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    user_id = message.from_user.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /cancel –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await clear_user_data(user_id)
        await message.answer(
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø—É –∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞'.")
    else:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")


@group_setup_handler.callback_query(F.data == "cancel_setup")
async def cancel_setup_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    user_id = callback.from_user.id
    logger.info(f"–ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")

    await state.clear()
    await clear_user_data(user_id)
    await callback.message.edit_text(
        "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø—É –∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞'.")
    await callback.answer()


@group_setup_handler.message(Command("setup"), F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))
async def setup_command_in_group(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setup –≤ –≥—Ä—É–ø–ø–µ"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /setup –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if await is_user_admin(message.bot, chat_id, user_id):
        # –°–æ–∑–¥–∞–µ–º –≥–ª—É–±–æ–∫—É—é —Å—Å—ã–ª–∫—É —Å ID –≥—Ä—É–ø–ø—ã
        # –°–æ–∑–¥–∞–µ–º –≥–ª—É–±–æ–∫—É—é —Å—Å—ã–ª–∫—É —Å ID –≥—Ä—É–ø–ø—ã
        bot_info = await message.bot.get_me()
        deep_link = f"https://t.me/{bot_info.username}?start={chat_id}"
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –≥–ª—É–±–æ–∫–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {deep_link}")

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º
        setup_button = InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞", url=deep_link)
        setup_markup = InlineKeyboardMarkup(inline_keyboard=[[setup_button]])

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω—É {user_id}")
        await message.answer(
            "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –º–µ–Ω—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ.",
            reply_markup=setup_markup
        )
    else:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã {chat_id}")
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã.")



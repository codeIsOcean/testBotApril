import random
import asyncio
from datetime import datetime, timedelta
import logging
import re

from aiogram import Router, F
from aiogram.types import ChatJoinRequest, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types.chat_permissions import ChatPermissions
from aiogram.utils.deep_linking import create_start_link
from aiogram.fsm.context import FSMContext

from html import escape

from sqlalchemy.future import select
from sqlalchemy import delete, insert, update
from sqlalchemy.ext.asyncio import AsyncSession

from bot.database.models import (User, Group, CaptchaSettings, CaptchaMessageId, CaptchaAnswer, TimeoutMessageId,
                                 GroupUsers, UserGroup)
from bot.database.session import get_session
from bot.utils.logger import TelegramLogHandler
from bot.services.redis_conn import redis
from bot.utils.logger import TelegramLogHandler, log_new_user, log_captcha_solved, log_captcha_failed, log_captcha_sent

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
if not logger.handlers:
    try:
        # –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞,
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –∏–ª–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        handler = logging.StreamHandler()
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        logger.addHandler(handler)

        # –°–æ–æ–±—â–∞–µ–º –æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –Ω–æ —Ç–µ–ª–µ–≥—Ä–∞–º-—Ö–µ–Ω–¥–ª–µ—Ä –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ
        logger.info("–ë–∞–∑–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –ª–æ–≥–≥–µ—Ä–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã–∑–æ–≤–µ–º –ø–æ–∑–∂–µ
        async def init_telegram_logger():
            try:
                telegram_handler = TelegramLogHandler()
                logger.addHandler(telegram_handler)
                logger.info("Telegram –ª–æ–≥–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –ª–æ–≥–≥–µ—Ä–∞: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞: {e}")

captcha_handler = Router()


@captcha_handler.chat_join_request()
async def handle_join_request(request: ChatJoinRequest):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å –∫–∞–ø—á–µ–π"""
    try:
        chat_id = request.chat.id
        user_id = request.from_user.id

        # ‚õî –ë–ª–æ–∫–∏—Ä—É–µ–º –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–µ math-–∫–∞–ø—á–∞
        captcha_type = await redis.hget(f"group:{chat_id}", "captcha_type")
        if captcha_type != "math":
            logger.info(f"‚õî Math-–∫–∞–ø—á–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ {chat_id}, –≤—ã—Ö–æ–¥–∏–º –∏–∑ math_captcha_handler")
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞ (–µ—Å–ª–∏ –±—ã–ª–æ)
        try:
            async with get_session() as session:
                result = await session.execute(
                    select(TimeoutMessageId.message_id).where(
                        TimeoutMessageId.user_id == user_id,
                        TimeoutMessageId.chat_id == chat_id
                    )
                )
                timeout_msg_id = result.scalar_one_or_none()

                if timeout_msg_id:
                    await request.bot.delete_message(user_id, timeout_msg_id)
                    await session.execute(
                        delete(TimeoutMessageId).where(
                            TimeoutMessageId.user_id == user_id,
                            TimeoutMessageId.chat_id == chat_id
                        )
                    )
                    await session.commit()
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞ {timeout_msg_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–π–º–∞—É—Ç-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            print(f"üßπ –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ç–∞–π–º–∞—É—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {user_id} –≤ {chat_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∫–∞–ø—á–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        async with get_session() as session:
            query = select(CaptchaSettings).where(
                CaptchaSettings.group_id == chat_id
            )
            result = await session.execute(query)
            captcha_settings = result.scalar_one_or_none()

            captcha_enabled = False
            if captcha_settings:
                captcha_enabled = captcha_settings.is_enabled
                print(
                    f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ø—á–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}, —Å—Ç–∞—Ç—É—Å: {'–≤–∫–ª—é—á–µ–Ω–æ' if captcha_enabled else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}")
            else:
                logger.warning(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ø—á–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å...")
                print(f"‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ø—á–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å...")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥—Ä—É–ø–ø–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ groups
                group_query = select(UserGroup).where(UserGroup.group_id == chat_id)
                group_result = await session.execute(group_query)
                group = group_result.scalar_one_or_none()

                if not group:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ —Ç–∞–±–ª–∏—Ü—É groups
                    chat_info = await request.bot.get_chat(chat_id)

                    creator_user_id = request.from_user.id
                    creator_username = request.from_user.username
                    creator_full_name = request.from_user.full_name

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—Å—Ç–∞–≤–∫–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    result = await session.execute(
                        select(User).where(User.user_id == creator_user_id)
                    )
                    existing_user = result.scalar_one_or_none()

                    if not existing_user:
                        await session.execute(
                            insert(User).values(
                                user_id=creator_user_id,
                                username=creator_username,
                                full_name=creator_full_name
                            )
                        )
                        await session.commit()  # —á—Ç–æ–±—ã –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á —Å—Ä–∞–±–æ—Ç–∞–ª
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è created_at
                    current_time = datetime.now()

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ
                    insert_group_query = insert(Group).values(
                        chat_id=chat_id,
                        title=escape(chat_info.title),
                        creator_user_id=creator_user_id

                    )
                    await session.execute(insert_group_query)
                    await session.commit()
                    print(f"‚úÖ –ì—Ä—É–ø–ø–∞ {chat_id} —Å–æ–∑–¥–∞–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ groups")

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–π –∫–∞–ø—á–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                # –ó–¥–µ—Å—å –º—ã –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å–µ–∞–Ω—Å, —á—Ç–æ–±—ã –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω–Ω—ã–º–∏, —á—Ç–æ –≥—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
                async with get_session() as new_session:
                    insert_query = insert(CaptchaSettings).values(
                        group_id=chat_id,
                        is_enabled=False,
                        created_at=datetime.now()
                    )
                    await new_session.execute(insert_query)
                    await new_session.commit()
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Redis
                    if redis:
                        await redis.hset(f"group:{chat_id}", "captcha_in_pm", "0")  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–ø—á–∏ –≤ –õ–°
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–ø—á–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–∞–ø—á–∏ –≤ –õ–°
            captcha_in_pm = False
            if redis:
                pm_setting = await redis.hget(f"group:{chat_id}", "captcha_in_pm")
                captcha_in_pm = pm_setting == "1"

            if not captcha_enabled:
                # –í—ã–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∫–∞–ø—á—É –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –æ–±—ã—á–Ω–∞—è –∫–∞–ø—á–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞
                print("üîÅ –í—ã–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∫–∞–ø—á—É")
                from bot.handlers.captcha.visual_captcha_handler import process_join_request
                await process_join_request(request)
                return
            else:
                # –ï—Å–ª–∏ –æ–±—ã—á–Ω–∞—è –∫–∞–ø—á–∞ –≤–∫–ª—é—á–µ–Ω–∞, –Ω–æ –º—ã —Ö–æ—Ç–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∏–∑—É–∞–ª—å–Ω—É—é
                # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω—É—é –∫–∞–ø—á—É
                print("üîÅ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω—É—é –∫–∞–ø—á—É")
                from bot.handlers.captcha.visual_captcha_handler import process_join_request
                await process_join_request(request)
                return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat = await request.bot.get_chat(chat_id)
        # –ë–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
        chat_title = chat.title

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ø—á–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with get_session() as session:
            query = select(CaptchaMessageId.message_id).where(
                CaptchaMessageId.user_id == user_id,
                CaptchaMessageId.chat_id == chat_id
            )
            result = await session.execute(query)
            prev_msg_id = result.scalar_one_or_none()

            if prev_msg_id:
                try:
                    await request.bot.delete_message(user_id, prev_msg_id)
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ø—á–∏: {str(e)}")
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ø—á–∏: {str(e)}")

                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã
                delete_query = delete(CaptchaMessageId).where(
                    CaptchaMessageId.user_id == user_id,
                    CaptchaMessageId.chat_id == chat_id
                )
                await session.execute(delete_query)
                await session.commit()
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–∞–ø—á–∏ –∏–∑ –ë–î")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É
        num1 = random.randint(1, 20)
        num2 = random.randint(1, 20)
        operation = random.choice(['+', '-', '*'])

        if operation == '+':
            answer = num1 + num2
        elif operation == '-':
            # –î–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º
            if num1 < num2:
                num1, num2 = num2, num1
            answer = num1 - num2
        else:  # operation == '*'
            # –î–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–∏–µ —á–∏—Å–ª–∞
            num1 = random.randint(1, 10)
            num2 = random.randint(1, 10)
            answer = num1 * num2

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        wrong_answers = [
            answer + random.randint(1, 5),
            answer - random.randint(1, 5),
            answer + random.randint(6, 10)
        ]

        if 0 in wrong_answers:
            wrong_answers[wrong_answers.index(0)] = answer + 11

        options = wrong_answers + [answer]
        random.shuffle(options)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        expiration_time = datetime.now() + timedelta(seconds=70)
        async with get_session() as session:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            delete_query = delete(CaptchaAnswer).where(
                CaptchaAnswer.user_id == user_id,
                CaptchaAnswer.chat_id == chat_id
            )
            await session.execute(delete_query)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            insert_query = insert(CaptchaAnswer).values(
                user_id=user_id,
                chat_id=chat_id,
                answer=str(answer),
                expires_at=expiration_time
            )
            await session.execute(insert_query)
            await session.commit()
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç–≤–µ—Ç {answer} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –ë–î")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = []
        row = []
        for i, option in enumerate(options):
            if i > 0 and i % 2 == 0:
                keyboard.append(row)
                row = []

            callback_data = f"pmcaptcha_{user_id}_{chat_id}_{option}"
            row.append(InlineKeyboardButton(text=str(option), callback_data=callback_data))

        if row:
            keyboard.append(row)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
        try:
            chat_link = f"https://t.me/{chat.username}" if chat.username else (
                await request.bot.export_chat_invite_link(chat_id))
        except Exception as e:
            chat_link = ""
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É: {e}")

        safe_title = escape(chat.title)
        group_name_clickable = f"<a href='{chat_link}'>{safe_title}</a>"

        msg = await request.bot.send_message(
            user_id,
            f"üëã –ü—Ä–∏–≤–µ—Ç, {request.from_user.first_name}!\n\n"
            f"–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ {group_name_clickable}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ—à–∏—Ç–µ –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É:\n\n"
            f"<b>{num1} {operation} {num2} = ?</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML",
            disable_web_page_preview=True
        )

        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ø—á–µ–π
        async with get_session() as session:
            insert_query = insert(CaptchaMessageId).values(
                user_id=user_id,
                chat_id=chat_id,
                message_id=msg.message_id,
                expires_at=expiration_time
            )
            await session.execute(insert_query)
            await session.commit()
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ø—á–µ–π {msg.message_id} –≤ –ë–î")

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ø—á–∏ –≤ Telegram
            username = request.from_user.username or f"id{user_id}"
            chat_name = chat.title
            log_captcha_sent(username, user_id, chat_name, chat_id)

            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞–ø—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É {chat_id}")
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞–ø—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É {chat_id}")

        # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∫–∞–ø—á–∏ (1 –º–∏–Ω—É—Ç–∞)
        asyncio.create_task(captcha_timeout(request, user_id, chat_id))

    except Exception as e:

        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {str(e)}")

        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {str(e)}")


@captcha_handler.callback_query(F.data.startswith("captcha_"))
async def process_captcha_answer(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–∞–ø—á—É - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω—É—é –∫–∞–ø—á—É"""
    try:
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∫–æ–ª–ª–±—ç–∫–∏ –Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω—É—é –∫–∞–ø—á—É
        from bot.handlers.captcha.visual_captcha_handler import process_callback
        await process_callback(callback)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω—É—é –∫–∞–ø—á—É: {str(e)}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω—É—é –∫–∞–ø—á—É: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def captcha_timeout(request: ChatJoinRequest, user_id: int, chat_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∫–∞–ø—á–∏"""
    await asyncio.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    async with get_session() as session:
        query = select(CaptchaAnswer).where(
            CaptchaAnswer.user_id == user_id,
            CaptchaAnswer.chat_id == chat_id,
            CaptchaAnswer.expires_at > datetime.now()
        )
        result = await session.execute(query)
        captcha_data = result.scalars().first()

    if captcha_data:
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            async with get_session() as session:
                msg_query = select(CaptchaMessageId.message_id).where(
                    CaptchaMessageId.user_id == user_id,
                    CaptchaMessageId.chat_id == chat_id
                )
                result = await session.execute(msg_query)
                prev_msg_id = result.scalar_one_or_none()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–ø—á–∞ –µ—â–µ –Ω–µ —Ä–µ—à–µ–Ω–∞
                captcha_check = await session.execute(
                    select(CaptchaAnswer).where(
                        CaptchaAnswer.user_id == user_id,
                        CaptchaAnswer.chat_id == chat_id
                    )
                )
                if not captcha_check.scalars().first():
                    # –ö–∞–ø—á–∞ —É–∂–µ —Ä–µ—à–µ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
                    print(f"‚úÖ –ö–∞–ø—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ —Ä–µ—à–µ–Ω–∞, –æ—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–∞—É—Ç")
                    return

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π
            if prev_msg_id:
                try:
                    await request.bot.delete_message(user_id, prev_msg_id)
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π {prev_msg_id} (—Ç–∞–π–º–∞—É—Ç)")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ø—á–∏: {str(e)}")
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ø—á–∏: {str(e)}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
            try:
                chat = await request.bot.get_chat(chat_id)
                try:
                    chat_link = f"https://t.me/{chat.username}" if chat.username else (
                        await request.bot.export_chat_invite_link(chat_id))
                    group_clickable = f"<a href='{chat_link}'>{chat.title}</a>"
                except Exception as e:
                    group_clickable = f"<b>{chat.title}</b>"
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É: {e}")
            except Exception as e:
                group_clickable = "<b>–≥—Ä—É–ø–ø—É</b>"
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: {e}")

            timeout_msg = await request.bot.send_message(
                user_id,
                f"‚è∞ –í—Ä–µ–º—è –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏ –∏—Å—Ç–µ–∫–ª–æ.\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ {group_clickable}.",
                parse_mode="HTML",
                disable_web_page_preview=True
            )

            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∞–π–º–∞—É—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–∞–π–º–∞—É—Ç-—Å–æ–æ–±—â–µ–Ω–∏—è
            async with get_session() as session:
                # –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä–æ–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                await session.execute(
                    delete(TimeoutMessageId).where(
                        TimeoutMessageId.user_id == user_id,
                        TimeoutMessageId.chat_id == chat_id
                    )
                )
                await session.execute(
                    insert(TimeoutMessageId).values(
                        user_id=user_id,
                        chat_id=chat_id,
                        message_id=timeout_msg.message_id
                    )
                )
                await session.commit()

                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞ –∫–∞–ø—á–∏
                try:
                    username = request.from_user.username or f"id{user_id}"
                    chat = await request.bot.get_chat(chat_id)
                    chat_name = chat.title
                    log_captcha_failed(username, user_id, chat_name, chat_id, "–¢–∞–π–º–∞—É—Ç")
                except Exception as log_err:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∞–π–º–∞—É—Ç–∞ –∫–∞–ø—á–∏: {log_err}")

                logger.info(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —Ä–µ—à–∏–ª –∫–∞–ø—Ç—á—É –≤–æ–≤—Ä–µ–º—è (—Ç–∞–π–º–∞—É—Ç) –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
                print(f"‚è∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —Ä–µ—à–∏–ª –∫–∞–ø—Ç—á—É –≤–æ–≤—Ä–µ–º—è –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")

            # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            async with get_session() as session:
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –∫–∞–ø—á–µ–π
                delete_msg_query = delete(CaptchaMessageId).where(
                    CaptchaMessageId.user_id == user_id,
                    CaptchaMessageId.chat_id == chat_id
                )
                await session.execute(delete_msg_query)

                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
                delete_answer_query = delete(CaptchaAnswer).where(
                    CaptchaAnswer.user_id == user_id,
                    CaptchaAnswer.chat_id == chat_id
                )
                await session.execute(delete_answer_query)
                await session.commit()
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ –∫–∞–ø—á–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î (—Ç–∞–π–º–∞—É—Ç)")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–π–º–∞—É—Ç–∞ –∫–∞–ø—á–∏: {str(e)}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–π–º–∞—É—Ç–∞ –∫–∞–ø—á–∏: {str(e)}")


async def delete_message_after_delay(bot, chat_id, message_id, delay_seconds):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
    try:
        await asyncio.sleep(delay_seconds)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ chat_id –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏ –±–æ—Ç –∏–º–µ–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø
            chat = await bot.get_chat(chat_id)
            if not chat:
                print(f"‚ö†Ô∏è –ß–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            bot_member = await bot.get_chat_member(chat_id, bot.id)
            if not bot_member.can_delete_messages and hasattr(chat, 'type') and chat.type != 'private':
                print(f"‚ö†Ô∏è –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat_id}")
                return

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.delete_message(chat_id, message_id)
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞ {chat_id} –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏ {delay_seconds} —Å–µ–∫")
        except Exception as e:
            if "chat not found" in str(e).lower():
                print(f"‚ö†Ô∏è –ß–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            elif "message to delete not found" in str(e).lower():
                print(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}: {str(e)}")
                try:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}: {str(e)}")
                except Exception as log_err:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–≥–µ—Ä–∞: {log_err}")
    except asyncio.CancelledError:
        print(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –ø–æ —É–¥–∞–ª–µ–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {str(e)}")


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
async def save_user_to_db(request: ChatJoinRequest):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        user = request.from_user
        chat_id = request.chat.id
        user_id = user.id
        username = user.username
        first_name = user.first_name
        last_name = user.last_name

        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = datetime.now()

        async with get_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
            query = select(GroupUsers).where(
                GroupUsers.user_id == user_id,
                GroupUsers.chat_id == chat_id
            )
            result = await session.execute(query)
            existing_user = result.scalar_one_or_none()

            if existing_user:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –ë–î, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                await session.execute(
                    update(GroupUsers).where(
                        GroupUsers.user_id == user_id,
                        GroupUsers.chat_id == chat_id
                    ).values(
                        username=username,
                        first_name=first_name,
                        last_name=last_name,
                        last_activity=current_time
                    )
                )
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                await session.execute(
                    insert(GroupUsers).values(
                        user_id=user_id,
                        chat_id=chat_id,
                        username=username,
                        first_name=first_name,
                        last_name=last_name,
                        joined_at=current_time,
                        last_activity=current_time
                    )
                )
            await session.commit()

            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username_val = username or first_name
            chat_info = await request.bot.get_chat(chat_id)
            chat_name = chat_info.title
            log_new_user(username_val, user_id, chat_name, chat_id)

            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username or first_name}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {str(e)}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {str(e)}")


async def save_user_to_db_by_id(bot, user_id, chat_id, user=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î –ø–æ –µ–≥–æ ID"""
    try:
        current_time = datetime.now()

        # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ
        if not user:
            try:
                user = await bot.get_chat_member(chat_id, user_id)
                user = user.user
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {str(e)}")
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {str(e)}")
                return

        username = user.username
        first_name = user.first_name
        last_name = user.last_name

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        try:
            chat_info = await bot.get_chat(chat_id)
            chat_name = chat_info.title if hasattr(chat_info, 'title') else f"–ß–∞—Ç {chat_id}"
        except Exception as e:
            chat_name = f"–ß–∞—Ç {chat_id}"
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ {chat_id}: {str(e)}")

        async with get_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
            query = select(GroupUsers).where(
                GroupUsers.user_id == user_id,
                GroupUsers.chat_id == chat_id
            )
            result = await session.execute(query)
            existing_user = result.scalar_one_or_none()

            if existing_user:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –ë–î, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                await session.execute(
                    update(GroupUsers).where(
                        GroupUsers.user_id == user_id,
                        GroupUsers.chat_id == chat_id
                    ).values(
                        username=username,
                        first_name=first_name,
                        last_name=last_name,
                        last_activity=current_time
                    )
                )
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                await session.execute(
                    insert(GroupUsers).values(
                        user_id=user_id,
                        chat_id=chat_id,
                        username=username,
                        first_name=first_name,
                        last_name=last_name,
                        joined_at=current_time,
                        last_activity=current_time
                    )
                )
            await session.commit()

            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username_val = username or first_name
            try:
                log_new_user(username_val, user_id, chat_name, chat_id)
            except Exception as log_err:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {log_err}")

            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username or first_name}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {str(e)}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {str(e)}")


async def generate_pm_captcha(bot, user_id, chat_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞–ø—á—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤ –õ–° —Å –±–æ—Ç–æ–º"""
    try:
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ–±—ã—á–Ω–æ–π –∫–∞–ø—á–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä
        num1 = random.randint(1, 20)
        num2 = random.randint(1, 20)
        operation = random.choice(['+', '-', '*'])

        if operation == '+':
            answer = num1 + num2
        elif operation == '-':
            # –î–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º
            if num1 < num2:
                num1, num2 = num2, num1
            answer = num1 - num2
        else:  # operation == '*'
            # –î–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–∏–µ —á–∏—Å–ª–∞
            num1 = random.randint(1, 10)
            num2 = random.randint(1, 10)
            answer = num1 * num2

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        wrong_answers = [
            answer + random.randint(1, 5),
            answer - random.randint(1, 5),
            answer + random.randint(6, 10)
        ]

        if 0 in wrong_answers:
            wrong_answers[wrong_answers.index(0)] = answer + 11

        options = wrong_answers + [answer]
        random.shuffle(options)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        chat = await bot.get_chat(chat_id)
        safe_title = escape(chat.title)

        try:
            chat_link = f"https://t.me/{chat.username}" if chat.username else (
                await bot.export_chat_invite_link(chat_id))
            group_name_clickable = f"<a href='{chat_link}'>{safe_title}</a>"
        except Exception as e:
            group_name_clickable = f"<b>{safe_title}</b>"
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        expiration_time = datetime.now() + timedelta(seconds=180)  # 3 –º–∏–Ω—É—Ç—ã –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ
        async with get_session() as session:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            delete_query = delete(CaptchaAnswer).where(
                CaptchaAnswer.user_id == user_id,
                CaptchaAnswer.chat_id == chat_id
            )
            await session.execute(delete_query)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            insert_query = insert(CaptchaAnswer).values(
                user_id=user_id,
                chat_id=chat_id,
                answer=str(answer),
                expires_at=expiration_time
            )
            await session.execute(insert_query)
            await session.commit()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = []
        row = []
        for i, option in enumerate(options):
            if i > 0 and i % 2 == 0:
                keyboard.append(row)
                row = []
                # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–ª–∏–Ω–æ–π
                callback_data = f"pmcaptcha_{user_id}_{chat_id}_{option}"
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É callback_data
                if len(callback_data) > 64:
                    logger.warning(
                        f"–í–Ω–∏–º–∞–Ω–∏–µ! callback_data –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram (64 —Å–∏–º–≤–æ–ª–∞): {len(callback_data)}")
                    print(f"‚ö†Ô∏è callback_data —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(callback_data)} —Å–∏–º–≤–æ–ª–æ–≤): {callback_data}")

                # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
                print(f"üîò –°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞: —Ç–µ–∫—Å—Ç={option}, callback_data={callback_data}")
                row.append(InlineKeyboardButton(text=str(option), callback_data=callback_data))

        if row:
            keyboard.append(row)

        return {
            "num1": num1,
            "num2": num2,
            "operation": operation,
            "answer": answer,
            "keyboard": InlineKeyboardMarkup(inline_keyboard=keyboard),
            "group_name": group_name_clickable
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–ø—á–∏ –≤ –õ–°: {str(e)}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–ø—á–∏ –≤ –õ–°: {str(e)}")
        return None


async def process_pm_captcha_answer(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–∞–ø—á—É –≤ –õ–°"""
    print("üì• –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pmcaptcha —Å—Ä–∞–±–æ—Ç–∞–ª")
    print(f"Callback data: {callback.data}")
    try:
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –¥–ª—è –∫–∞–ø—á–∏ –≤ –õ–°: {callback.data}")
        print(
            f"üìù –î–µ—Ç–∞–ª–∏ callback: data={callback.data}, from_user={callback.from_user.id}, message_id={callback.message.message_id}")

        parts = callback.data.split("_")
        logger.info(f"–†–∞–∑–±–æ—Ä callback –¥–∞–Ω–Ω—ã—Ö: {parts}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π: {len(parts)}")
        print(f"üìä –†–∞–∑–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: {parts}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π: {len(parts)}")

        if len(parts) != 4:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            logger.error(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ callback: {callback.data}, –æ–∂–∏–¥–∞–ª–æ—Å—å 4 —á–∞—Å—Ç–∏, –ø–æ–ª—É—á–µ–Ω–æ {len(parts)}")
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ callback: {callback.data}, –æ–∂–∏–¥–∞–ª–æ—Å—å 4 —á–∞—Å—Ç–∏, –ø–æ–ª—É—á–µ–Ω–æ {len(parts)}")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –æ—à–∏–±–∫–∏
        try:
            _, user_id_str, chat_id_str, answer_str = parts
            logger.info(
                f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: prefix='{_}', user_id='{user_id_str}', chat_id='{chat_id_str}', answer='{answer_str}'")

            # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å –æ—Ç–¥–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            try:
                user_id = int(user_id_str)
            except ValueError as e:
                logger.error(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å user_id '{user_id_str}' –≤ —á–∏—Å–ª–æ: {e}")
                print(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å user_id '{user_id_str}' –≤ —á–∏—Å–ª–æ: {e}")
                await callback.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
                return

            try:
                chat_id = int(chat_id_str)
            except ValueError as e:
                logger.error(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å chat_id '{chat_id_str}' –≤ —á–∏—Å–ª–æ: {e}")
                print(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å chat_id '{chat_id_str}' –≤ —á–∏—Å–ª–æ: {e}")
                await callback.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ID —á–∞—Ç–∞", show_alert=True)
                return

            try:
                answer = int(answer_str)
            except ValueError as e:
                logger.error(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å answer '{answer_str}' –≤ —á–∏—Å–ª–æ: {e}")
                print(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å answer '{answer_str}' –≤ —á–∏—Å–ª–æ: {e}")
                await callback.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç–≤–µ—Ç–∞", show_alert=True)
                return

            logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: user_id={user_id}, chat_id={chat_id}, answer={answer}")
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã: user_id={user_id}, chat_id={chat_id}, answer={answer}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö callback: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö callback: {e}")
            await callback.answer("–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –ø—Ä–∏—à–µ–ª –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if callback.from_user.id != user_id:
            await callback.answer("–≠—Ç–∞ –∫–∞–ø—á–∞ –Ω–µ –¥–ª—è –≤–∞—Å", show_alert=True)
            logger.warning(f"‚õî –ü–æ–ø—ã—Ç–∫–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id} –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–∞–ø—á—É –¥–ª—è {user_id}")
            print(f"‚õî –ü–æ–ø—ã—Ç–∫–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id} –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–∞–ø—á—É –¥–ª—è {user_id}")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with get_session() as session:
            query = select(CaptchaAnswer.answer).where(
                CaptchaAnswer.user_id == user_id,
                CaptchaAnswer.chat_id == chat_id,
                CaptchaAnswer.expires_at > datetime.now()
            )
            result = await session.execute(query)
            correct_answer_str = result.scalar_one_or_none()

        if correct_answer_str is None:
            await callback.answer("–í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏ –∏—Å—Ç–µ–∫–ª–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑.",
                                  show_alert=True)
            print(f"‚è∞ –í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏ –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return

        correct_answer = int(correct_answer_str)

        if answer == correct_answer:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            await callback.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç.", show_alert=True)
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∫–∞–ø—á—É –≤ –õ–°")

            # –û–¥–æ–±—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
            try:
                bot = callback.bot
                await bot.approve_chat_join_request(chat_id=chat_id, user_id=user_id)

                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏
                username = callback.from_user.username or f"id{user_id}"
                chat = await bot.get_chat(chat_id)
                chat_name = chat.title
                log_captcha_solved(username, user_id, chat_name, chat_id)

                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É –≤ –õ–° –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {chat_id}")
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {chat_id} —á–µ—Ä–µ–∑ –∫–∞–ø—á—É –≤ –õ–°")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                await save_user_to_db_by_id(bot, user_id, chat_id, callback.from_user)

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                chat = await bot.get_chat(chat_id)

                try:
                    chat_link = f"https://t.me/{chat.username}" if chat.username else (
                        await bot.export_chat_invite_link(chat_id))
                    group_name_clickable = f"<a href='{chat_link}'>{escape(chat.title)}</a>"
                except Exception as e:
                    group_name_clickable = f"<b>{escape(chat.title)}</b>"
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É: {e}")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π
                await callback.message.edit_text(
                    f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ {group_name_clickable}!",
                    reply_markup=None,
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )

                # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
                async with get_session() as session:
                    delete_answer_query = delete(CaptchaAnswer).where(
                        CaptchaAnswer.user_id == user_id,
                        CaptchaAnswer.chat_id == chat_id
                    )
                    await session.execute(delete_answer_query)
                    await session.commit()

                # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –∫–∞–ø—á–∏ –∏–∑ Redis
                if redis:
                    await redis.delete(f"captcha:{user_id}:{chat_id}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –õ–°-–∫–∞–ø—á—É: {str(e)}")
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –õ–°-–∫–∞–ø—á—É: {str(e)}")
                await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            await callback.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∫–∞–ø—á—É –≤ –õ–°")

            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            await callback.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∫–∞–ø—á—É –≤ –õ–°. –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer}")
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∫–∞–ø—á—É –≤ –õ–°. –û—Ç–≤–µ—Ç–∏–ª: {answer}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç—ã –≤ –±–∞–∑–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            async with get_session() as session:
                query = select(CaptchaAnswer).where(
                    CaptchaAnswer.user_id == user_id,
                    CaptchaAnswer.chat_id == chat_id
                )
                result = await session.execute(query)
                captcha_record = result.scalar_one_or_none()
                if captcha_record:
                    logger.info(
                        f"–ó–∞–ø–∏—Å—å –≤ –±–∞–∑–µ: user_id={captcha_record.user_id}, answer={captcha_record.answer}, expires_at={captcha_record.expires_at}")
                    print(f"üìã –ó–∞–ø–∏—Å—å –∫–∞–ø—á–∏ –≤ –ë–î: answer={captcha_record.answer}, –∏—Å—Ç–µ–∫–∞–µ—Ç={captcha_record.expires_at}")
                else:
                    logger.warning(f"–ó–∞–ø–∏—Å—å –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
                    print(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å –∫–∞–ø—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
            username = callback.from_user.username or f"id{user_id}"
            chat = await callback.bot.get_chat(chat_id)
            chat_name = chat.title
            log_captcha_failed(username, user_id, chat_name, chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –õ–°")

            # –î–∞–µ–º –µ—â–µ –æ–¥–Ω—É –ø–æ–ø—ã—Ç–∫—É - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–∞–ø—á—É
            captcha_data = await generate_pm_captcha(callback.bot, user_id, chat_id)
            if captcha_data:
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–ø—á–∏
                logger.info(
                    f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞–ø—á–∞: {captcha_data['num1']} {captcha_data['operation']} {captcha_data['num2']} = {captcha_data['answer']}")
                print(
                    f"üîÑ –ù–æ–≤–∞—è –∫–∞–ø—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {captcha_data['num1']} {captcha_data['operation']} {captcha_data['num2']} = {captcha_data['answer']}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                keyboard_data = captcha_data['keyboard'].inline_keyboard
                logger.info(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {keyboard_data}")
                for row in keyboard_data:
                    for button in row:
                        logger.info(f"–ö–Ω–æ–ø–∫–∞: —Ç–µ–∫—Å—Ç={button.text}, callback_data={button.callback_data}")

                await callback.message.edit_text(
                    f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n"
                    f"–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {captcha_data['group_name']} —Ä–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É:\n\n"
                    f"<b>{captcha_data['num1']} {captcha_data['operation']} {captcha_data['num2']} = ?</b>\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
                    reply_markup=captcha_data['keyboard'],
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–ø—á—É –≤ –õ–°: {str(e)}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–ø—á—É –≤ –õ–°: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def handle_pm_captcha(request: ChatJoinRequest):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ø—á–∏ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º"""
    try:
        chat_id = request.chat.id
        user_id = request.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat = await request.bot.get_chat(chat_id)
        chat_title = chat.title

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º deep link –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–∞–ø—á–∏
        payload = f"captcha_{user_id}_{chat_id}"
        captcha_link = await create_start_link(request.bot, payload)

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
            chat_link = f"https://t.me/{chat.username}" if chat.username else (
                await request.bot.export_chat_invite_link(chat_id))
            group_name_clickable = f"<a href='{chat_link}'>{escape(chat_title)}</a>"
        except Exception as e:
            group_name_clickable = f"<b>{escape(chat_title)}</b>"
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å deep link –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await request.bot.send_message(
                user_id,
                f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {request.from_user.first_name}!\n\n"
                f"–í—ã —Å–¥–µ–ª–∞–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É {group_name_clickable}.\n"
                f"–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–ø—á–µ–π, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É", url=captcha_link)]
                ]),
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–ø—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É {chat_id}")
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–ø—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ø—á–µ –≤ Redis —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Å—Ä–æ–∫–æ–º –∂–∏–∑–Ω–∏ (10 –º–∏–Ω—É—Ç)
            if redis:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: captcha:USER_ID:CHAT_ID -> "1"
                await redis.set(f"captcha:{user_id}:{chat_id}", "1", ex=600)  # 10 –º–∏–Ω—É—Ç

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–ø—á—É
            username = request.from_user.username or f"id{user_id}"
            chat_name = chat.title
            log_captcha_sent(username, user_id, chat_name, chat_id)

        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π: {str(e)}")
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π: {str(e)}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–ø—á–∏ –≤ –õ–°: {str(e)}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–ø—á–∏ –≤ –õ–°: {str(e)}")


@captcha_handler.callback_query(F.data.startswith("pmcaptcha_"))
async def handle_pm_captcha_callback(callback: CallbackQuery):
    await process_pm_captcha_answer(callback)




from aiogram import Bot
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, ChatMemberUpdated
from aiogram.utils.deep_linking import create_start_link
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, insert, or_
import logging

from bot.database.models import Group, ChatSettings, UserGroup, User
from bot.handlers.settings_inprivate_handler import settings_inprivate_handler, redis
from bot.handlers.settings_inprivate_handler import photo_filter_settings_callback
from bot.handlers.settings_inprivate_handler import show_settings_callback
from bot.handlers.settings_inprivate_handler import captcha_settings_callback
from bot.handlers.new_member_requested_mute import process_mute_settings as new_member_requested_handler_settings

logger = logging.getLogger(__name__)

group_settings_handler = Router()


async def is_user_group_admin(bot: Bot, user_id: int, chat_id: int, session: AsyncSession) -> tuple[bool, Group | None]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã"""
    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –≥—Ä—É–ø–ø—ã
    creator_result = await session.execute(
        select(Group).where(Group.chat_id == chat_id, Group.creator_user_id == user_id)
    )
    group = creator_result.scalar_one_or_none()

    if group:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –≥—Ä—É–ø–ø—ã {chat_id}")
        return True, group

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ UserGroup
    admin_result = await session.execute(
        select(UserGroup).join(Group, Group.chat_id == UserGroup.group_id)
        .where(
            UserGroup.user_id == user_id,
            Group.chat_id == chat_id
        )
    )
    user_group = admin_result.scalar_one_or_none()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ UserGroup
    if user_group:
        group_result = await session.execute(
            select(Group).where(Group.chat_id == chat_id)
        )
        group = group_result.scalar_one_or_none()
        if group:
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã {chat_id} (–∏–∑ UserGroup)")
            return True, group

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API Telegram
    try:
        chat_member = await bot.get_chat_member(chat_id, user_id)
        if chat_member.status in ('administrator', 'creator'):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            group_result = await session.execute(
                select(Group).where(Group.chat_id == chat_id)
            )
            group = group_result.scalar_one_or_none()

            if group:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ UserGroup, –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
                await session.execute(
                    insert(UserGroup)
                    .values(user_id=user_id, group_id=chat_id)
                    .on_conflict_do_nothing()
                )
                await session.commit()

                logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã {chat_id} (–∏–∑ Telegram API)")
                return True, group
    except Exception as e:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥—Ä—É–ø–ø–∞ –≤–æ–æ–±—â–µ
        try:
            await bot.get_chat(chat_id)
            # –ì—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ —á–µ—Ä–µ–∑ API: {e}")
        except Exception:
            # –ì—Ä—É–ø–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø–æ–º–µ—Ç–∏–º –µ—ë –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
            if group:
                group.is_active = False
                await session.commit()
                logger.warning(f"–ì—Ä—É–ø–ø–∞ {chat_id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã {chat_id}")
    return False, None


@group_settings_handler.message(Command("settings"))
@group_settings_handler.message(
    Command(commands=["start"], magic=lambda cmd: cmd.args and cmd.args.startswith("setup_")))
async def list_groups_of_admin(message: Message, session: AsyncSession, bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if message.chat.type != "private":
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")
        return

    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª—É–±–æ–∫–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
    if message.text.startswith("/start setup_"):
        try:
            chat_id = int(message.text.split("_")[1])
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –≥–ª—É–±–æ–∫–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã {chat_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            is_admin, group = await is_user_group_admin(bot, user_id, chat_id, session)

            if not is_admin:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")
                return

            # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π CallbackQuery –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            call = CallbackQuery(
                id="direct_link",
                from_user=message.from_user,
                chat_instance="direct_link",
                message=message,
                data=f"group_settings:{chat_id}"
            )
            await show_group_settings(call, session, bot)
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–ª—É–±–æ–∫–æ–π —Å—Å—ã–ª–∫–∏: {e}")
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
            return

    try:
        # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–¥–∏–º
        user_result = await session.execute(
            select(User).where(User.user_id == user_id)
        )
        user = user_result.scalar_one_or_none()

        if not user:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                user_id=user_id,
                username=message.from_user.username,
                full_name=f"{message.from_user.first_name} {message.from_user.last_name or ''}".strip()
            )
            session.add(user)
            await session.commit()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        groups_query = (
            select(Group)
            .outerjoin(UserGroup, Group.chat_id == UserGroup.group_id)
            .where(or_(
                Group.creator_user_id == user_id,
                UserGroup.user_id == user_id
            ))
        )

        result = await session.execute(groups_query)
        groups = list(result.scalars().all())

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∑–∞–ø—Ä–æ—Å–∏–º –≥—Ä—É–ø–ø—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Telegram API
        user_chats = []
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–∏—Ö –≥—Ä—É–ø–ø–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
            bot_info = await bot.get_me()
            bot_id = bot_info.id

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.debug(f"–ò—â–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —á–µ—Ä–µ–∑ Telegram API")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ Telegram API: {e}")

    except Exception as e:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        return



        # üß† –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏–º –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã, –≥–¥–µ –±–æ—Ç –µ—Å—Ç—å, –Ω–æ user –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
        all_groups_result = await session.execute(select(Group))
        all_groups = all_groups_result.scalars().all()

        # –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã
        groups_to_remove = []

        for group in all_groups:
            try:
                member = await bot.get_chat_member(group.chat_id, user_id)
                if member.status in ("administrator", "creator"):
                    # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Å–≤—è–∑–∏
                    exists = await session.execute(
                        select(UserGroup).where(UserGroup.user_id == user_id, UserGroup.group_id == group.chat_id)
                    )
                    if not exists.scalar_one_or_none():
                        session.add(UserGroup(user_id=user_id, group_id=group.chat_id))
                        await session.commit()
                        logger.info(f"üìå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å: user={user_id}, group={group.chat_id}")
            except Exception as e:
                logger.warning(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–ª–µ–Ω–∞ –≥—Ä—É–ø–ø—ã {group.chat_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥—Ä—É–ø–ø–∞ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥
                try:
                    chat_info = await bot.get_chat(group.chat_id)
                    # –ì—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                    logger.info(f"–ì—Ä—É–ø–ø–∞ {group.chat_id} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
                except Exception:
                    # –ì—Ä—É–ø–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø–æ–º–µ—Ç–∏–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    logger.warning(f"üóëÔ∏è –ì—Ä—É–ø–ø–∞ {group.chat_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã")
                    groups_to_remove.append(group.chat_id)

        # –£–¥–∞–ª—è–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã
        if groups_to_remove:
            try:
                # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –≤ UserGroup
                for chat_id in groups_to_remove:
                    await session.execute(
                        update(Group)
                        .where(Group.chat_id == chat_id)
                        .values(is_active=False)
                    )
                await session.commit()
                logger.info(f"üßπ –ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ {len(groups_to_remove)} –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø: {e}")
                await session.rollback()

    if not groups:
        await message.answer(
            "‚ÑπÔ∏è –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã —Å —ç—Ç–∏–º –±–æ—Ç–æ–º. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –µ–≥–æ "
            "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return

    buttons = [
        [InlineKeyboardButton(text=g.title, callback_data=f"group_settings:{g.chat_id}")]
        for g in groups
    ]

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("üîß –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=kb)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª —Å–ø–∏—Å–æ–∫ –∏–∑ {len(groups)} –≥—Ä—É–ø–ø –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")


async def list_groups_of_admin_from_user_id(user_id: int, call: CallbackQuery, session: AsyncSession, bot: Bot):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        groups_query = (
            select(Group)
            .outerjoin(UserGroup, Group.chat_id == UserGroup.group_id)
            .where(or_(
                Group.creator_user_id == user_id,
                UserGroup.user_id == user_id
            ))
        )
        result = await session.execute(groups_query)
        groups = list(result.scalars().all())

        if not groups:
            await call.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", show_alert=True)
            return

        buttons = [
            [InlineKeyboardButton(text=g.title, callback_data=f"group_settings:{g.chat_id}")]
            for g in groups
        ]
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)

        try:
            await call.message.edit_text("üîß –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=kb)
        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            await call.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É—Å—Ç–∞—Ä–µ–ª–æ.", show_alert=True)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –¥–ª—è user_id={user_id}: {e}", exc_info=True)


@group_settings_handler.callback_query(lambda c: c.data.startswith("group_settings:"))
async def show_group_settings(call: CallbackQuery, session: AsyncSession, bot: Bot):
    user_id = call.from_user.id
    chat_id = int(call.data.split(":")[1])

    logger.debug(f"user_id: {user_id}, type: {type(user_id)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
    is_admin, group = await is_user_group_admin(bot, user_id, chat_id, session)

    if not is_admin or not group:
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π –≥—Ä—É–ø–ø–æ–π", show_alert=True)
        return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≥—Ä—É–ø–ø—ã –≤ Redis –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await redis.hset(f"user:{user_id}", "group_id", chat_id)

    try:
        chat = await bot.get_chat(int(chat_id))
        if chat.username:
            link = f"https://t.me/{chat.username}"
            title = f"{chat.title}"
        else:
            title = f"{chat.title} (ID: {chat_id})"
    except Exception:
        title = f"ID: {chat_id}"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏—Ö –≤ —Ç–µ–∫—É—â–µ–º —Ä–æ—É—Ç–µ—Ä–µ
    await call.message.edit_text(
        f"üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã: {title}\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "- üö´ –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "- ü§ñ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–ø—á—É –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "- üîö –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (/cancel)",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ú—É—Ç–∞ –ù–æ–≤—ã—Ö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                                  callback_data="redirect:new_member_requested_handler_settings")],
            [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ö–∞–ø—á–∏", callback_data="redirect:captcha_settings")],
            [InlineKeyboardButton(text="–§–∏–ª—å—Ç—Ä –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", callback_data="redirect:photo_filter_settings")]
        ]),
        parse_mode="HTML",
        disable_web_page_preview=True
    )

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã {chat_id} ({group.title})")


@group_settings_handler.callback_query(lambda c: c.data.startswith("redirect:"))
async def redirect_callback(call: CallbackQuery, session: AsyncSession, bot: Bot):
    original_callback = call.data.split(":", 1)[1]
    user_id = call.from_user.id

    logger.info(f"‚öôÔ∏è [Redirect] –ü–æ–ª—É—á–µ–Ω callback: {original_callback} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    group_id = await redis.hget(f"user:{user_id}", "group_id")
    logger.debug(f"üß© [Redirect] group_id –∏–∑ Redis: {group_id}")

    if not group_id:
        await call.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ –≥—Ä—É–ø–ø–µ", show_alert=True)
        return

    is_admin, _ = await is_user_group_admin(bot, user_id, int(group_id), session)
    if not is_admin:
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π –≥—Ä—É–ø–ø–æ–π", show_alert=True)
        return

    try:
        if original_callback == "captcha_settings":
            await captcha_settings_callback(call)
        ...
    except Exception as e:
        logger.exception(f"üí• –û—à–∏–±–∫–∞ –≤ redirect_callback: {e}")
        await call.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        return

    # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    try:
        if original_callback == "captcha_settings":
            await captcha_settings_callback(call)
        elif original_callback == "photo_filter_settings":
            await photo_filter_settings_callback(call)
        elif original_callback == "new_member_requested_handler_settings":
            await new_member_requested_handler_settings(call)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ redirect-callback {original_callback}: {e}", exc_info=True)
        await call.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)


@group_settings_handler.callback_query(lambda c: c.data.startswith("toggle_photo_filter:"))
async def toggle_photo_filter(call: CallbackQuery, session: AsyncSession, bot: Bot):
    user_id = call.from_user.id
    chat_id = int(call.data.split(":")[1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_admin, _ = await is_user_group_admin(bot, user_id, chat_id, session)

    if not is_admin:
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π –≥—Ä—É–ø–ø–æ–π", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    result = await session.execute(
        select(ChatSettings).where(ChatSettings.chat_id == chat_id)
    )
    settings = result.scalar_one()

    # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    new_value = not settings.enable_photo_filter
    await session.execute(
        update(ChatSettings)
        .where(ChatSettings.chat_id == chat_id)
        .values(enable_photo_filter=new_value)
    )
    await session.commit()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≥—Ä—É–ø–ø—ã
    await show_group_settings(call, session, bot)
    await call.answer(f"–§–∏–ª—å—Ç—Ä —Ñ–æ—Ç–æ {'–≤–∫–ª—é—á–µ–Ω' if new_value else '–≤—ã–∫–ª—é—á–µ–Ω'}")


@group_settings_handler.callback_query(lambda c: c.data.startswith("toggle_admin_bypass:"))
async def toggle_admin_bypass(call: CallbackQuery, session: AsyncSession, bot: Bot):
    user_id = call.from_user.id
    chat_id = int(call.data.split(":")[1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_admin, _ = await is_user_group_admin(bot, user_id, chat_id, session)

    if not is_admin:
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π –≥—Ä—É–ø–ø–æ–π", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    result = await session.execute(
        select(ChatSettings).where(ChatSettings.chat_id == chat_id)
    )
    settings = result.scalar_one()

    # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    new_value = not settings.admins_bypass_photo_filter
    await session.execute(
        update(ChatSettings)
        .where(ChatSettings.chat_id == chat_id)
        .values(admins_bypass_photo_filter=new_value)
    )
    await session.commit()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≥—Ä—É–ø–ø—ã
    await show_group_settings(call, session, bot)
    await call.answer(f"–û–±—Ö–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞ –∞–¥–º–∏–Ω–∞–º–∏ {'–≤–∫–ª—é—á–µ–Ω' if new_value else '–≤—ã–∫–ª—é—á–µ–Ω'}")


@group_settings_handler.callback_query(lambda c: c.data == "back_to_groups")
async def back_to_groups_list(call: CallbackQuery, session: AsyncSession, bot: Bot):
    user_id = call.from_user.id
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≥—Ä—É–ø–ø—É –≤ Redis –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    # (–ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É)
    # await redis.hdel(f"user:{user_id}", "group_id")
    await list_groups_of_admin_from_user_id(user_id, call, session, bot)


@group_settings_handler.my_chat_member()
async def handle_bot_added(event: ChatMemberUpdated, session: AsyncSession, bot: Bot):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
    if event.new_chat_member.status not in ("member", "administrator"):
        return

    chat = event.chat
    chat_id = chat.id
    logger.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É: {chat.title} (ID: {chat_id})")

    try:
        async with session.begin():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ –≤ –ë–î
            group_result = await session.execute(
                select(Group).where(Group.chat_id == chat_id)
            )
            group = group_result.scalar_one_or_none()

            if not group:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≥—Ä—É–ø–ø—ã
                admins = await bot.get_chat_administrators(chat_id)
                creator = next((a for a in admins if a.status == "creator"), None)
                creator_id = creator.user.id if creator else None

                # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
                for admin in admins:
                    admin_id = admin.user.id
                    admin_username = admin.user.username
                    admin_full_name = f"{admin.user.first_name} {admin.user.last_name or ''}".strip()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
                    user_result = await session.execute(
                        select(User).where(User.user_id == admin_id)
                    )
                    user = user_result.scalar_one_or_none()

                    if not user:
                        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user = User(
                            user_id=admin_id,
                            username=admin_username,
                            full_name=admin_full_name
                        )
                        session.add(user)

                await session.flush()

                group = Group(
                    chat_id=chat_id,
                    title=chat.title,
                    creator_user_id=creator_id,
                    is_active=True
                )
                logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É: {chat.title} ({chat.id}), creator={creator_id}")
                session.add(group)
                await session.flush()

                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ UserGroup
                for admin in admins:
                    admin_id = admin.user.id
                    await session.execute(
                        insert(UserGroup)
                        .values(user_id=admin_id, group_id=chat_id)
                        .on_conflict_do_nothing()
                    )

                    logger.info("‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        setup_link = await create_start_link(bot, f"setup_{chat_id}", encode=True)
        await bot.send_message(
            chat_id,
            "ü§ñ –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É!\n\n"
            "‚öôÔ∏è <b>–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b> –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç:\n"
            "1. –ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –≤ –õ–° –∫–æ–º–∞–Ω–¥—É <code>/settings</code>\n"
            f"2. –ò–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {setup_link}\n\n"
            "üîê –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.",
            parse_mode="HTML"
        )
        logger.info(f"–ì—Ä—É–ø–ø–∞ {chat.title} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã {chat.title}: {str(e)}", exc_info=True)
        try:
            await session.rollback()
        except:
            pass


@group_settings_handler.message(Command("group_info"))
async def show_group_info(message: Message, session: AsyncSession, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø–µ –∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if message.chat.type not in ["group", "supergroup"]:
        await message.answer("‚ÑπÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö")
        return

    chat_id = message.chat.id
    user_id = message.from_user.id

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –≥—Ä—É–ø–ø–∞ –≤ –ë–î
        group_result = await session.execute(select(Group).where(Group.chat_id == chat_id))
        group = group_result.scalar_one_or_none()

        if not group:
            await message.answer("‚ÑπÔ∏è –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ Telegram
        admins = await bot.get_chat_administrators(chat_id)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –Ω–∞—à–µ–π –ë–î
        db_admins_result = await session.execute(
            select(UserGroup.user_id).where(UserGroup.group_id == chat_id)
        )
        db_admin_ids = [row[0] for row in db_admins_result]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        text = [
            f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:</b> {message.chat.title}",
            f"üÜî ID: <code>{chat_id}</code>",
            f"üëë –°–æ–∑–¥–∞—Ç–µ–ª—å: <code>{group.creator_user_id}</code>",
            "",
            "üë• <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤ Telegram:</b>"
        ]

        for admin in admins:
            name = admin.user.username or f"{admin.user.first_name} {admin.user.last_name or ''}".strip()
            text.append(f"- {name} (ID: <code>{admin.user.id}</code>) - {admin.status}")

        text.extend([
            "",
            f"üîë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤ –±–∞–∑–µ –±–æ—Ç–∞</b> ({len(db_admin_ids)}):"
        ])

        for admin_id in db_admin_ids:
            text.append(f"- ID: <code>{admin_id}</code>")

        await message.answer("\n".join(text), parse_mode="HTML")
        logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ {chat_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ {chat_id}: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ.")


@group_settings_handler.message(Command("force_debug"))
async def force_debug(message: Message, session: AsyncSession):
    groups = await session.execute(select(Group))
    for g in groups.scalars().all():
        await message.answer(f"Group: {g.title} | Creator: {g.creator_user_id} | Chat ID: {g.chat_id}")

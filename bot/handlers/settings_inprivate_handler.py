from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select, insert, update, delete

from bot.handlers.new_member_requested_mute import new_member_requested_handler
from bot.services.redis_conn import redis
from bot.database.session import *
from bot.database.models import (User, Group, CaptchaSettings, CaptchaAnswer, CaptchaMessageId, ChatSettings,
                                 UserRestriction, UserGroup)
from bot.handlers.photo_del_handler import check_image_with_yolov5, check_image_with_opennsfw2

settings_inprivate_handler = Router()


@settings_inprivate_handler.callback_query(F.data == "show_settings")
async def show_settings_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    group_id = await redis.hget(f"user:{user_id}", "group_id")

    if not group_id:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ –≥—Ä—É–ø–ø–µ. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å' –≤ –≥—Ä—É–ø–ø–µ.")
        await callback.answer()
        return

    try:
        chat = await callback.bot.get_chat(int(group_id))
        if chat.username:
            link = f"https://t.me/{chat.username}"
            title = f"[{chat.title}]({link})"
        else:
            title = f"{chat.title} (ID: `{group_id}`)"
    except Exception:
        title = f"ID: `{group_id}`"

    await callback.message.answer(
        f"üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã: {title}\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "- üö´ –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "- ü§ñ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–ø—á—É –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "- üîö –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (/cancel)",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ú—É—Ç–∞ –ù–æ–≤—ã—Ö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                                  callback_data="new_member_requested_handler_settings")],
            [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ö–∞–ø—á–∏", callback_data="captcha_settings")],
            [InlineKeyboardButton(text="–§–∏–ª—å—Ç—Ä –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", callback_data="photo_filter_settings")]
        ]),
        parse_mode="Markdown",
        disable_web_page_preview=True
    )
    await callback.answer()


# –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ toggle_captcha_callback –∑–∞–º–µ–Ω–∏—Ç–µ
@settings_inprivate_handler.callback_query(F.data == "toggle_captcha")
async def toggle_captcha_callback(callback: CallbackQuery):
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –∏–∑ Redis
    group_id = await redis.hget(f"user:{user_id}", "group_id")

    if not group_id:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ –≥—Ä—É–ø–ø–µ")
        await callback.answer()
        return

    group_id = int(group_id)

    # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–ø—á–∏ –≤ –ë–î
    async with get_session() as session:
        query = select(CaptchaSettings.is_enabled).where(CaptchaSettings.group_id == group_id)
        result = await session.execute(query)
        current_state = result.scalar_one_or_none()

        if current_state is None:
            # –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –≤–∫–ª—é—á—ë–Ω–Ω—É—é –∫–∞–ø—á—É
            await session.execute(
                insert(CaptchaSettings).values(group_id=group_id, is_enabled=True)
            )
            new_state = True
        else:
            new_state = not current_state
            await session.execute(
                update(CaptchaSettings).where(CaptchaSettings.group_id == group_id).values(is_enabled=new_state)
            )

        await session.commit()

    # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º Redis
    await redis.hset(f"group:{group_id}", "captcha_enabled", "1" if new_state else "0")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    status_text = "–≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ" if new_state else "–æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚ùå"
    await callback.answer(f"–ö–∞–ø—á–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {status_text}", show_alert=True)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –º–µ–Ω—é –∫–∞–ø—á–∏
    await captcha_settings_callback(callback)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–ø—á–∏
@settings_inprivate_handler.callback_query(F.data == "captcha_settings")
async def captcha_settings_callback(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–ø—á–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    user_id = callback.from_user.id
    group_id = await redis.hget(f"user:{user_id}", "group_id")

    if not group_id:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ –≥—Ä—É–ø–ø–µ")
        return

    group_id = int(group_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–ø—á–∏
    async with get_session() as session:
        query = select(CaptchaSettings).where(CaptchaSettings.group_id == group_id)
        result = await session.execute(query)
        settings = result.scalar_one_or_none()

        is_enabled = settings.is_enabled if settings else False

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
    status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if is_enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ø—á–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}\n\n"
        f"–ö–∞–ø—á–∞ –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞—â–∏—Ç–∏—Ç—å –≤–∞—à—É –≥—Ä—É–ø–ø—É –æ—Ç —Å–ø–∞–º-–±–æ—Ç–æ–≤, —Ç—Ä–µ–±—É—è –æ—Ç –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ "
        f"—Ä–µ—à–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚úÖ –í–∫–ª—é—á–∏—Ç—å –∫–∞–ø—á—É" if not is_enabled else "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–ø—á—É",
                callback_data="toggle_captcha"
            )],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="show_settings")]
        ]),
        parse_mode="Markdown"
    )

    await callback.answer()

# –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò –§–ò–õ–¨–¢–†–ê –§–û–¢–û–ì–†–ê–§–ò–ô

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ —Ñ–æ—Ç–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
@settings_inprivate_handler.callback_query(F.data == "toggle_photo_filter")
async def toggle_photo_filter(callback: CallbackQuery):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Ñ–æ—Ç–æ"""
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –∏–∑ Redis
    group_id = await redis.hget(f"user:{user_id}", "group_id")

    if not group_id:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ –≥—Ä—É–ø–ø–µ", show_alert=True)
        return

    group_id = int(group_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
    async with get_session() as session:
        query = select(ChatSettings).where(ChatSettings.chat_id == group_id)
        result = await session.execute(query)
        settings = result.scalar_one_or_none()

        new_state = not (settings.enable_photo_filter if settings else False)

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î
        if settings:
            await session.execute(
                update(ChatSettings).where(
                    ChatSettings.chat_id == group_id
                ).values(
                    enable_photo_filter=new_state
                )
            )
        else:
            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞–µ–º –∏—Ö
            await session.execute(
                insert(ChatSettings).values(
                    chat_id=group_id,
                    enable_photo_filter=new_state
                )
            )

        await session.commit()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await callback.answer(
        f"–§–∏–ª—å—Ç—Ä —Ñ–æ—Ç–æ {'–≤–∫–ª—é—á–µ–Ω' if new_state else '–≤—ã–∫–ª—é—á–µ–Ω'} –¥–ª—è –≥—Ä—É–ø–ø—ã",
        show_alert=True
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await photo_filter_settings_callback(callback)


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–∏–ª—å—Ç—Ä–∞ —Ñ–æ—Ç–æ
@settings_inprivate_handler.callback_query(F.data == "photo_filter_settings")
async def photo_filter_settings_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    group_id = await redis.hget(f"user:{user_id}", "group_id")

    if not group_id:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ –≥—Ä—É–ø–ø–µ")
        await callback.answer()
        return

    group_id = int(group_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞
    async with get_session() as session:
        query = select(ChatSettings).where(ChatSettings.chat_id == group_id)
        result = await session.execute(query)
        settings = result.scalar_one_or_none()

        filter_enabled = settings.enable_photo_filter if settings else False
        mute_minutes = settings.photo_filter_mute_minutes if settings else 60
        admins_bypass = settings.admins_bypass_photo_filter if settings else False

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∏–Ω—É—Ç—ã –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    time_text = f"{mute_minutes} –º–∏–Ω—É—Ç" if mute_minutes < 60 else f"{mute_minutes // 60} —á–∞—Å(–æ–≤)" if mute_minutes < 1440 else f"{mute_minutes // 1440} –¥–µ–Ω—å(–¥–Ω–µ–π)"

    status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if filter_enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
    admins_status = "‚úÖ –î–∞" if admins_bypass else "‚ùå –ù–µ—Ç"

    await callback.message.edit_text(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n\n"
        f"–°—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–∞: {status}\n"
        f"–í—Ä–µ–º—è –º—É—Ç–∞: {time_text}\n"
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –æ–±—Ö–æ–¥—è—Ç —Ñ–∏–ª—å—Ç—Ä: {admins_status}\n\n"
        f"–§–∏–ª—å—Ç—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ "
        f"–∏ –º—É—Ç–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ —Ç–∞–∫–æ–µ —Ñ–æ—Ç–æ.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚úÖ –í–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä" if not filter_enabled else "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä",
                callback_data="toggle_photo_filter"
            )],
            [InlineKeyboardButton(text="‚è± –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –º—É—Ç–∞", callback_data="set_photo_filter_mute_time")],
            [InlineKeyboardButton(text="üëÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="toggle_admins_bypass")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="show_settings")]
        ]),
        parse_mode="Markdown"
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ö–æ–¥–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
@settings_inprivate_handler.callback_query(F.data == "toggle_admins_bypass")
async def toggle_admins_bypass(callback: CallbackQuery):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ö–æ–¥–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    user_id = callback.from_user.id
    group_id = await redis.hget(f"user:{user_id}", "group_id")

    if not group_id:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ –≥—Ä—É–ø–ø–µ", show_alert=True)
        return

    group_id = int(group_id)

    # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–±—Ö–æ–¥–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
    async with get_session() as session:
        query = select(ChatSettings).where(ChatSettings.chat_id == group_id)
        result = await session.execute(query)
        settings = result.scalar_one_or_none()

        new_state = not (settings.admins_bypass_photo_filter if settings else False)

        if settings:
            await session.execute(
                update(ChatSettings).where(
                    ChatSettings.chat_id == group_id
                ).values(
                    admins_bypass_photo_filter=new_state
                )
            )
        else:
            await session.execute(
                insert(ChatSettings).values(
                    chat_id=group_id,
                    admins_bypass_photo_filter=new_state
                )
            )

        await session.commit()

    await callback.answer(
        f"–û–±—Ö–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ {'–≤–∫–ª—é—á–µ–Ω' if new_state else '–æ—Ç–∫–ª—é—á–µ–Ω'}",
        show_alert=True
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await photo_filter_settings_callback(callback)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –º—É—Ç–∞ –∑–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
@settings_inprivate_handler.callback_query(F.data == "set_photo_filter_mute_time")
async def set_photo_filter_mute_time(callback: CallbackQuery):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –º—É—Ç–∞ –∑–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ"""
    user_id = callback.from_user.id
    group_id = await redis.hget(f"user:{user_id}", "group_id")

    if not group_id:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ –≥—Ä—É–ø–ø–µ", show_alert=True)
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="15 –º–∏–Ω—É—Ç", callback_data="set_photo_mute_time_15"),
            InlineKeyboardButton(text="30 –º–∏–Ω—É—Ç", callback_data="set_photo_mute_time_30")
        ],
        [
            InlineKeyboardButton(text="1 —á–∞—Å", callback_data="set_photo_mute_time_60"),
            InlineKeyboardButton(text="3 —á–∞—Å–∞", callback_data="set_photo_mute_time_180")
        ],
        [
            InlineKeyboardButton(text="1 –¥–µ–Ω—å", callback_data="set_photo_mute_time_1440"),
            InlineKeyboardButton(text="–ù–∞–≤—Å–µ–≥–¥–∞", callback_data="set_photo_mute_time_0")
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="photo_filter_settings")
        ]
    ])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text(
        "‚è± –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –º—É—Ç–∞ –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:",
        reply_markup=keyboard
    )

    await callback.answer()


@settings_inprivate_handler.callback_query(lambda c: c.data.startswith("set_photo_mute_time_"))
async def process_photo_mute_time(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –º—É—Ç–∞"""
    user_id = callback.from_user.id
    group_id = await redis.hget(f"user:{user_id}", "group_id")

    if not group_id:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ –≥—Ä—É–ø–ø–µ", show_alert=True)
        return

    group_id = int(group_id)

    # üõ† –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç
    try:
        parts = callback.data.split('_')
        minutes = int(parts[-1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏", show_alert=True)
        return

    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    async with get_session() as session:
        result = await session.execute(select(ChatSettings).where(ChatSettings.chat_id == group_id))
        settings = result.scalar_one_or_none()

        if settings:
            await session.execute(
                update(ChatSettings).where(ChatSettings.chat_id == group_id).values(
                    photo_filter_mute_minutes=minutes
                )
            )
        else:
            await session.execute(
                insert(ChatSettings).values(
                    chat_id=group_id,
                    photo_filter_mute_minutes=minutes
                )
            )
        await session.commit()

    # ‚è± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    time_text = "–Ω–∞–≤—Å–µ–≥–¥–∞" if minutes == 0 else (
        f"{minutes} –º–∏–Ω—É—Ç" if minutes < 60 else
        f"{minutes // 60} —á–∞—Å(–æ–≤)" if minutes < 1440 else
        f"{minutes // 1440} –¥–µ–Ω—å(–¥–Ω–µ–π)"
    )

    await callback.answer(f"–í—Ä–µ–º—è –º—É—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_text}", show_alert=True)
    await photo_filter_settings_callback(callback)



from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from bot.handlers.new_member_requested_mute import new_member_requested_handler
from bot.services.redis_conn import redis
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

settings_inprivate_handler = Router()


@settings_inprivate_handler.callback_query(F.data == "show_settings")
async def show_settings_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    group_id = await redis.hget(f"user:{user_id}", "group_id")

    if not group_id:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ –≥—Ä—É–ø–ø–µ. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å' –≤ –≥—Ä—É–ø–ø–µ.")
        await callback.answer()
        return

    try:
        chat = await callback.bot.get_chat(int(group_id))
        if chat.username:
            link = f"https://t.me/{chat.username}"
            title = f"[{chat.title}]({link})"
        else:
            title = f"{chat.title} (ID: `{group_id}`)"
    except Exception:
        title = f"ID: `{group_id}`"

    await callback.message.answer(
        f"üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã: {title}\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "- üö´ –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "- ü§ñ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–ø—á—É –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "- üîö –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (/cancel)",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ú—É—Ç–∞ –ù–æ–≤—ã—Ö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                                  callback_data="new_member_requested_handler_settings")],
            [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ö–∞–ø—á–∏", callback_data="captcha_settings")]
        ]),
        parse_mode="Markdown"
    )
    await callback.answer()


@settings_inprivate_handler.callback_query(F.data == "captcha_settings")
async def captcha_settings_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    group_id = await redis.hget(f"user:{user_id}", "group_id")

    if not group_id:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ –≥—Ä—É–ø–ø–µ")
        await callback.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ø—á–∏
    captcha_enabled = await redis.hget(f"group:{group_id}", "captcha_enabled") or "0"
    status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if captcha_enabled == "1" else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"

    await callback.message.answer(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞–ø—á–∏\n\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}\n\n"
        f"–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–∞–ø—á—É "
        f"–ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –≤—Ö–æ–¥ –≤ –≥—Ä—É–ø–ø—É. –¢–æ–ª—å–∫–æ —Ç–µ, –∫—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à–∏—Ç –∑–∞–¥–∞—á—É, "
        f"—Å–º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ –±–µ–∑ –º—É—Ç–∞.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚úÖ –í–∫–ª—é—á–∏—Ç—å –∫–∞–ø—á—É" if captcha_enabled != "1" else "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–ø—á—É",
                callback_data="toggle_captcha"
            )],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="show_settings")]
        ])
    )
    await callback.answer()


@settings_inprivate_handler.callback_query(F.data == "toggle_captcha")
async def toggle_captcha_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    group_id = await redis.hget(f"user:{user_id}", "group_id")

    if not group_id:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ –≥—Ä—É–ø–ø–µ")
        await callback.answer()
        return

    # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await redis.hget(f"group:{group_id}", "captcha_enabled") or "0"
    new_state = "0" if current_state == "1" else "1"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await redis.hset(f"group:{group_id}", "captcha_enabled", new_state)

    status = "–≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ" if new_state == "1" else "–æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚ùå"
    await callback.message.answer(f"‚úÖ –ö–∞–ø—á–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {status}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∫–∞–ø—á–∏
    await captcha_settings_callback(callback)
